/**
 * pubmed.endNote.jaxb.generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 1535 2008-09-09 15:44:46Z max.at.xam.de $) on 13/01/11 08:05 PM
 */
package ws.biotea.ld2rdf.rdf.model.bibo;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;

/**
 * This class manages access to these properties:
 * <ul>
 *   <li> Abstract </li>
 *   <li> AllValuesFrom </li>
 *   <li> ChangeNote </li>
 *   <li> Contributor </li>
 *   <li> Created </li>
 *   <li> Creator </li>
 *   <li> Date </li>
 *   <li> Deprecated </li>
 *   <li> Description </li>
 *   <li> EditorialNote </li>
 *   <li> EquivalentClass </li>
 *   <li> EquivalentProperty </li>
 *   <li> Example </li>
 *   <li> HistoryNote </li>
 *   <li> InverseOf </li>
 *   <li> IsPartOf </li>
 *   <li> IsReferencedBy </li>
 *   <li> IsVersionOf </li>
 *   <li> Isbn </li>
 *   <li> Issued </li>
 *   <li> MaxCardinality </li>
 *   <li> MinCardinality </li>
 *   <li> Name </li>
 *   <li> OnProperty </li>
 *   <li> Producedin </li>
 *   <li> Product </li>
 *   <li> Publisher </li>
 *   <li> Relation </li>
 *   <li> ScopeNote </li>
 *   <li> Termstatus </li>
 *   <li> Title </li>
 *   <li> UnionOf </li>
 *   <li> VersionInfo </li>
 * </ul>
 *
 * This class was pubmed.endNote.jaxb.generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 13/01/11 08:05 PM
 */
public class Thing extends org.ontoware.rdfreactor.schema.rdfs.Class {
	public static final URI RDF_TYPE = new URIImpl("http://www.w3.org/1999/02/22-rdf-syntax-ns#type", false);
    
	/** http://www.w3.org/2000/01/rdf-schema#Class */	
	@SuppressWarnings("hiding")
	public static final URI RDFS_CLASS = new URIImpl("http://www.w3.org/2000/01/rdf-schema#Class", false);

    /** http://purl.org/ontology/bibo/abstract */
    @SuppressWarnings("hiding")
	public static final URI ABSTRACT = new URIImpl("http://purl.org/ontology/bibo/abstract",false);

    /** http://www.w3.org/2002/07/owl#allValuesFrom */
    @SuppressWarnings("hiding")
	public static final URI ALLVALUESFROM = new URIImpl("http://www.w3.org/2002/07/owl#allValuesFrom",false);

    /** http://www.w3.org/2008/05/skos#changeNote */
    @SuppressWarnings("hiding")
	public static final URI CHANGENOTE = new URIImpl("http://www.w3.org/2008/05/skos#changeNote",false);

    /** http://purl.org/dc/terms/contributor */
    @SuppressWarnings("hiding")
	public static final URI CONTRIBUTOR = new URIImpl("http://purl.org/dc/terms/contributor",false);

    /** http://purl.org/dc/terms/created */
    @SuppressWarnings("hiding")
	public static final URI CREATED = new URIImpl("http://purl.org/dc/terms/created",false);

    /** http://purl.org/dc/terms/creator */
    @SuppressWarnings("hiding")
	public static final URI CREATOR = new URIImpl("http://purl.org/dc/terms/creator",false);

    /** http://purl.org/dc/terms/date */
    @SuppressWarnings("hiding")
	public static final URI DATE = new URIImpl("http://purl.org/dc/terms/date",false);

    /** http://www.w3.org/2006/12/owl2-xml#deprecated */
    @SuppressWarnings("hiding")
	public static final URI DEPRECATED = new URIImpl("http://www.w3.org/2006/12/owl2-xml#deprecated",false);

    /** http://purl.org/dc/terms/description */
    @SuppressWarnings("hiding")
	public static final URI DESCRIPTION = new URIImpl("http://purl.org/dc/terms/description",false);

    /** http://www.w3.org/2008/05/skos#editorialNote */
    @SuppressWarnings("hiding")
	public static final URI EDITORIALNOTE = new URIImpl("http://www.w3.org/2008/05/skos#editorialNote",false);

    /** http://www.w3.org/2002/07/owl#equivalentClass */
    @SuppressWarnings("hiding")
	public static final URI EQUIVALENTCLASS = new URIImpl("http://www.w3.org/2002/07/owl#equivalentClass",false);

    /** http://www.w3.org/2002/07/owl#equivalentProperty */
    @SuppressWarnings("hiding")
	public static final URI EQUIVALENTPROPERTY = new URIImpl("http://www.w3.org/2002/07/owl#equivalentProperty",false);

    /** http://www.w3.org/2008/05/skos#example */
    @SuppressWarnings("hiding")
	public static final URI EXAMPLE = new URIImpl("http://www.w3.org/2008/05/skos#example",false);

    /** http://www.w3.org/2008/05/skos#historyNote */
    @SuppressWarnings("hiding")
	public static final URI HISTORYNOTE = new URIImpl("http://www.w3.org/2008/05/skos#historyNote",false);

    /** http://www.w3.org/2002/07/owl#inverseOf */
    @SuppressWarnings("hiding")
	public static final URI INVERSEOF = new URIImpl("http://www.w3.org/2002/07/owl#inverseOf",false);

    /** http://purl.org/dc/terms/isPartOf */
    @SuppressWarnings("hiding")
	public static final URI ISPARTOF = new URIImpl("http://purl.org/dc/terms/isPartOf",false);

    /** http://purl.org/dc/terms/isReferencedBy */
    @SuppressWarnings("hiding")
	public static final URI ISREFERENCEDBY = new URIImpl("http://purl.org/dc/terms/isReferencedBy",false);

    /** http://purl.org/dc/terms/isVersionOf */
    @SuppressWarnings("hiding")
	public static final URI ISVERSIONOF = new URIImpl("http://purl.org/dc/terms/isVersionOf",false);

    /** http://purl.org/ontology/bibo/isbn */
    @SuppressWarnings("hiding")
	public static final URI ISBN = new URIImpl("http://purl.org/ontology/bibo/isbn",false);

    /** http://purl.org/dc/terms/issued */
    @SuppressWarnings("hiding")
	public static final URI ISSUED = new URIImpl("http://purl.org/dc/terms/issued",false);

    /** http://www.w3.org/2002/07/owl#maxCardinality */
    @SuppressWarnings("hiding")
	public static final URI MAXCARDINALITY = new URIImpl("http://www.w3.org/2002/07/owl#maxCardinality",false);

    /** http://www.w3.org/2002/07/owl#minCardinality */
    @SuppressWarnings("hiding")
	public static final URI MINCARDINALITY = new URIImpl("http://www.w3.org/2002/07/owl#minCardinality",false);

    /** http://xmlns.com/foaf/0.1/name */
    @SuppressWarnings("hiding")
	public static final URI NAME = new URIImpl("http://xmlns.com/foaf/0.1/name",false);

    /** http://www.w3.org/2002/07/owl#onProperty */
    @SuppressWarnings("hiding")
	public static final URI ONPROPERTY = new URIImpl("http://www.w3.org/2002/07/owl#onProperty",false);

    /** http://purl.org/NET/c4dm/event.owl#produced_in */
    @SuppressWarnings("hiding")
	public static final URI PRODUCEDIN = new URIImpl("http://purl.org/NET/c4dm/event.owl#produced_in",false);

    /** http://purl.org/NET/c4dm/event.owl#product */
    @SuppressWarnings("hiding")
	public static final URI PRODUCT = new URIImpl("http://purl.org/NET/c4dm/event.owl#product",false);

    /** http://purl.org/dc/terms/publisher */
    @SuppressWarnings("hiding")
	public static final URI PUBLISHER = new URIImpl("http://purl.org/dc/terms/publisher",false);

    /** http://purl.org/dc/terms/relation */
    @SuppressWarnings("hiding")
	public static final URI RELATION = new URIImpl("http://purl.org/dc/terms/relation",false);

    /** http://www.w3.org/2008/05/skos#scopeNote */
    @SuppressWarnings("hiding")
	public static final URI SCOPENOTE = new URIImpl("http://www.w3.org/2008/05/skos#scopeNote",false);

    /** http://www.w3.org/2003/06/sw-vocab-status/ns#term_status */
    @SuppressWarnings("hiding")
	public static final URI TERMSTATUS = new URIImpl("http://www.w3.org/2003/06/sw-vocab-status/ns#term_status",false);

    /** http://purl.org/dc/terms/title */
    @SuppressWarnings("hiding")
	public static final URI TITLE = new URIImpl("http://purl.org/dc/terms/title",false);

    /** http://www.w3.org/2002/07/owl#unionOf */
    @SuppressWarnings("hiding")
	public static final URI UNIONOF = new URIImpl("http://www.w3.org/2002/07/owl#unionOf",false);

    /** http://www.w3.org/2002/07/owl#versionInfo */
    @SuppressWarnings("hiding")
	public static final URI VERSIONINFO = new URIImpl("http://www.w3.org/2002/07/owl#versionInfo",false);
    
    /** http://www.w3.org/2002/07/owl#versionInfo */
    @SuppressWarnings("hiding")
	public static final URI RDFS_LABEL = new URIImpl("http://www.w3.org/2000/01/rdf-schema#label",false);
    

    /** 
     * All property-URIs with this class as domain.
     * All properties of all super-classes are also available. 
     */
    @SuppressWarnings("hiding")
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://purl.org/ontology/bibo/abstract",false),
      new URIImpl("http://www.w3.org/2002/07/owl#allValuesFrom",false),
      new URIImpl("http://www.w3.org/2008/05/skos#changeNote",false),
      new URIImpl("http://purl.org/dc/terms/contributor",false),
      new URIImpl("http://purl.org/dc/terms/created",false),
      new URIImpl("http://purl.org/dc/terms/creator",false),
      new URIImpl("http://purl.org/dc/terms/date",false),
      new URIImpl("http://www.w3.org/2006/12/owl2-xml#deprecated",false),
      new URIImpl("http://purl.org/dc/terms/description",false),
      new URIImpl("http://www.w3.org/2008/05/skos#editorialNote",false),
      new URIImpl("http://www.w3.org/2002/07/owl#equivalentClass",false),
      new URIImpl("http://www.w3.org/2002/07/owl#equivalentProperty",false),
      new URIImpl("http://www.w3.org/2008/05/skos#example",false),
      new URIImpl("http://www.w3.org/2008/05/skos#historyNote",false),
      new URIImpl("http://www.w3.org/2002/07/owl#inverseOf",false),
      new URIImpl("http://purl.org/dc/terms/isPartOf",false),
      new URIImpl("http://purl.org/dc/terms/isReferencedBy",false),
      new URIImpl("http://purl.org/dc/terms/isVersionOf",false),
      new URIImpl("http://purl.org/ontology/bibo/isbn",false),
      new URIImpl("http://purl.org/dc/terms/issued",false),
      new URIImpl("http://www.w3.org/2002/07/owl#maxCardinality",false),
      new URIImpl("http://www.w3.org/2002/07/owl#minCardinality",false),
      new URIImpl("http://xmlns.com/foaf/0.1/name",false),
      new URIImpl("http://www.w3.org/2002/07/owl#onProperty",false),
      new URIImpl("http://purl.org/NET/c4dm/event.owl#produced_in",false),
      new URIImpl("http://purl.org/NET/c4dm/event.owl#product",false),
      new URIImpl("http://purl.org/dc/terms/publisher",false),
      new URIImpl("http://purl.org/dc/terms/relation",false),
      new URIImpl("http://www.w3.org/2008/05/skos#scopeNote",false),
      new URIImpl("http://www.w3.org/2003/06/sw-vocab-status/ns#term_status",false),
      new URIImpl("http://purl.org/dc/terms/title",false),
      new URIImpl("http://www.w3.org/2002/07/owl#unionOf",false),
      new URIImpl("http://www.w3.org/2002/07/owl#versionInfo",false)
    };


	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c1] 
	 */
	protected Thing ( Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c2] 
	 */
	public Thing ( Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}


	/**
	 * Returns a Java wrapper over an RDF object, identified by a URI, given as a String.
	 * Creating two wrappers for the same URI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString a URI given as a String
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 * @throws ModelRuntimeException if URI syntax is wrong
	 *
	 * [Generated from RDFReactor template rule #c7] 
	 */
	public Thing ( Model model, String uriString, boolean write) throws ModelRuntimeException {
		super(model, RDFS_CLASS, new URIImpl(uriString,false), write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c8] 
	 */
	public Thing ( Model model, BlankNode bnode, boolean write ) {
		super(model, RDFS_CLASS, bnode, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly pubmed.endNote.jaxb.generated URI.
	 * Creating two wrappers results in different URIs.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c9] 
	 */
	public Thing ( Model model, boolean write ) {
		super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
	}

    ///////////////////////////////////////////////////////////////////
    // typing

	/**
	 * Return an existing instance of this class in the model. No statements are written.
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return an instance of Thing  or null if none existst
	 *
	 * [Generated from RDFReactor template rule #class0] 
	 */
	public static Thing  getInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getInstance(model, instanceResource, Thing.class);
	}

	/**
	 * Create a new instance of this class in the model. 
	 * That is, create the statement (instanceResource, RDF.type, http://www.w3.org/2000/01/rdf-schema#Class).
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class1] 
	 */
	public static void createInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.createInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return true if instanceResource is an instance of this class in the model
	 *
	 * [Generated from RDFReactor template rule #class2] 
	 */
	public static boolean hasInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.hasInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as RDF resources
	 *
	 * [Generated from RDFReactor template rule #class3] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstances(Model model) {
		return Base.getAllInstances(model, RDFS_CLASS, org.ontoware.rdf2go.model.node.Resource.class);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as a ReactorResult,
	 * which can conveniently be converted to iterator, list or array.
	 *
	 * [Generated from RDFReactor template rule #class3-as] 
	 */
	public static ReactorResult<? extends Thing> getAllInstances_as(Model model) {
		return Base.getAllInstances_as(model, RDFS_CLASS, Thing.class );
	}

    /**
	 * Remove rdf:type Thing from this instance. Other triples are not affected.
	 * To delete more, use deleteAllProperties
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class4] 
	 */
	public static void deleteInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * Delete all (this, *, *), i.e. including rdf:type
	 * @param model an RDF2Go model
	 * @param resource
	 */
	public static void deleteAllProperties(Model model,	org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteAllProperties(model, instanceResource);
	}

    ///////////////////////////////////////////////////////////////////
    // property access methods

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'AllValuesFrom' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllbiboAllValuesFrom_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.ALLVALUESFROM, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'AllValuesFrom' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllbiboAllValuesFrom_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.ALLVALUESFROM, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'AllValuesFrom' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllbiboAllValuesFrom_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.ALLVALUESFROM, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ChangeNote' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllbiboChangeNote_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.CHANGENOTE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ChangeNote' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllbiboChangeNote_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.CHANGENOTE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ChangeNote' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllbiboChangeNote_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.CHANGENOTE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Contributor' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllbiboContributor_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.CONTRIBUTOR, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Contributor' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllbiboContributor_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.CONTRIBUTOR, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Contributor' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllbiboContributor_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.CONTRIBUTOR, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Created' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllbiboCreated_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.CREATED, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Created' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllbiboCreated_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.CREATED, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Created' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllbiboCreated_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.CREATED, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Creator' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllbiboCreator_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.CREATOR, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Creator' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllbiboCreator_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.CREATOR, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Creator' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllbiboCreator_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.CREATOR, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Date' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllbiboDate_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.DATE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Date' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllbiboDate_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.DATE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Date' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllbiboDate_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.DATE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Deprecated' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllbiboDeprecated_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.DEPRECATED, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Deprecated' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllbiboDeprecated_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.DEPRECATED, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Deprecated' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllbiboDeprecated_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.DEPRECATED, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Description' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllbiboDescription_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.DESCRIPTION, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Description' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllbiboDescription_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.DESCRIPTION, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Description' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllbiboDescription_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.DESCRIPTION, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'EditorialNote' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllbiboEditorialNote_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.EDITORIALNOTE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'EditorialNote' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllbiboEditorialNote_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.EDITORIALNOTE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'EditorialNote' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllbiboEditorialNote_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.EDITORIALNOTE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'EquivalentClass' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllbiboEquivalentClass_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.EQUIVALENTCLASS, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'EquivalentClass' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllbiboEquivalentClass_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.EQUIVALENTCLASS, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'EquivalentClass' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllbiboEquivalentClass_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.EQUIVALENTCLASS, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'EquivalentProperty' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllbiboEquivalentProperty_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.EQUIVALENTPROPERTY, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'EquivalentProperty' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllbiboEquivalentProperty_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.EQUIVALENTPROPERTY, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'EquivalentProperty' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllbiboEquivalentProperty_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.EQUIVALENTPROPERTY, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Example' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllbiboExample_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.EXAMPLE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Example' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllbiboExample_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.EXAMPLE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Example' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllbiboExample_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.EXAMPLE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'HistoryNote' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllbiboHistoryNote_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.HISTORYNOTE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'HistoryNote' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllbiboHistoryNote_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.HISTORYNOTE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'HistoryNote' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllbiboHistoryNote_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.HISTORYNOTE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'InverseOf' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllbiboInverseOf_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.INVERSEOF, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'InverseOf' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllbiboInverseOf_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.INVERSEOF, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'InverseOf' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllbiboInverseOf_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.INVERSEOF, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'IsPartOf' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllbiboIsPartOf_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.ISPARTOF, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'IsPartOf' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllbiboIsPartOf_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.ISPARTOF, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'IsPartOf' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllbiboIsPartOf_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.ISPARTOF, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'IsReferencedBy' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllbiboIsReferencedBy_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.ISREFERENCEDBY, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'IsReferencedBy' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllbiboIsReferencedBy_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.ISREFERENCEDBY, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'IsReferencedBy' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllbiboIsReferencedBy_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.ISREFERENCEDBY, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'IsVersionOf' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllbiboIsVersionOf_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.ISVERSIONOF, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'IsVersionOf' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllbiboIsVersionOf_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.ISVERSIONOF, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'IsVersionOf' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllbiboIsVersionOf_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.ISVERSIONOF, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Isbn' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllbiboIsbn_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.ISBN, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Isbn' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllbiboIsbn_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.ISBN, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Isbn' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllbiboIsbn_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.ISBN, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Issued' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllbiboIssued_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.ISSUED, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Issued' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllbiboIssued_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.ISSUED, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Issued' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllbiboIssued_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.ISSUED, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'MaxCardinality' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllbiboMaxCardinality_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.MAXCARDINALITY, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'MaxCardinality' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllbiboMaxCardinality_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.MAXCARDINALITY, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'MaxCardinality' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllbiboMaxCardinality_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.MAXCARDINALITY, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'MinCardinality' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllbiboMinCardinality_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.MINCARDINALITY, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'MinCardinality' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllbiboMinCardinality_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.MINCARDINALITY, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'MinCardinality' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllbiboMinCardinality_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.MINCARDINALITY, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Name' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllbiboName_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.NAME, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Name' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllbiboName_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.NAME, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Name' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllbiboName_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.NAME, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'OnProperty' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllbiboOnProperty_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.ONPROPERTY, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'OnProperty' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllbiboOnProperty_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.ONPROPERTY, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'OnProperty' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllbiboOnProperty_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.ONPROPERTY, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Producedin' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllbiboProducedin_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.PRODUCEDIN, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Producedin' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllbiboProducedin_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.PRODUCEDIN, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Producedin' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllbiboProducedin_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.PRODUCEDIN, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Product' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllbiboProduct_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.PRODUCT, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Product' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllbiboProduct_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.PRODUCT, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Product' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllbiboProduct_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.PRODUCT, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Publisher' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllbiboPublisher_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.PUBLISHER, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Publisher' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllbiboPublisher_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.PUBLISHER, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Publisher' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllbiboPublisher_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.PUBLISHER, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Relation' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllbiboRelation_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.RELATION, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Relation' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllbiboRelation_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.RELATION, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Relation' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllbiboRelation_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.RELATION, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ScopeNote' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllbiboScopeNote_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.SCOPENOTE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ScopeNote' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllbiboScopeNote_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.SCOPENOTE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ScopeNote' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllbiboScopeNote_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.SCOPENOTE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Termstatus' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllbiboTermstatus_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.TERMSTATUS, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Termstatus' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllbiboTermstatus_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.TERMSTATUS, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Termstatus' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllbiboTermstatus_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.TERMSTATUS, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Title' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllbiboTitle_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.TITLE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Title' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllbiboTitle_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.TITLE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Title' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllbiboTitle_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.TITLE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'UnionOf' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllbiboUnionOf_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.UNIONOF, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'UnionOf' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllbiboUnionOf_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.UNIONOF, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'UnionOf' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllbiboUnionOf_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.UNIONOF, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'VersionInfo' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllbiboVersionInfo_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.VERSIONINFO, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'VersionInfo' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllbiboVersionInfo_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.VERSIONINFO, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'VersionInfo' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllbiboVersionInfo_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.VERSIONINFO, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}



    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1499c19 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasbiboAbstract(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ABSTRACT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1499c19 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasbiboAbstract() {
		return Base.has(this.model, this.getResource(), ABSTRACT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1499c19 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasbiboAbstract(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ABSTRACT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1499c19 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasbiboAbstract( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ABSTRACT);
	}

     /**
     * Get all values of property Abstract as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboAbstract_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ABSTRACT);
	}
	
    /**
     * Get all values of property Abstract as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboAbstract_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ABSTRACT, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Abstract as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboAbstract_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ABSTRACT);
	}

    /**
     * Get all values of property Abstract as a ReactorResult of RDF2Go nodes 
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboAbstract_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ABSTRACT, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Abstract     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllbiboAbstract(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ABSTRACT, java.lang.String.class);
	}
	
    /**
     * Get all values of property Abstract as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllbiboAbstract_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ABSTRACT, java.lang.String.class);
	}

    /**
     * Get all values of property Abstract     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllbiboAbstract() {
		return Base.getAll(this.model, this.getResource(), ABSTRACT, java.lang.String.class);
	}

    /**
     * Get all values of property Abstract as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllbiboAbstract_as() {
		return Base.getAll_as(this.model, this.getResource(), ABSTRACT, java.lang.String.class);
	}
 
    /**
     * Adds a value to property Abstract as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addbiboAbstract( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ABSTRACT, value);
	}
	
    /**
     * Adds a value to property Abstract as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addbiboAbstract( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ABSTRACT, value);
	}
    /**
     * Adds a value to property Abstract from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addbiboAbstract(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, ABSTRACT, value);
	}
	
    /**
     * Adds a value to property Abstract from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addbiboAbstract(java.lang.String value) {
		Base.add(this.model, this.getResource(), ABSTRACT, value);
	}
  

    /**
     * Sets a value of property Abstract from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setbiboAbstract( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ABSTRACT, value);
	}
	
    /**
     * Sets a value of property Abstract from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setbiboAbstract( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ABSTRACT, value);
	}
    /**
     * Sets a value of property Abstract from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setbiboAbstract(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, ABSTRACT, value);
	}
	
    /**
     * Sets a value of property Abstract from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setbiboAbstract(java.lang.String value) {
		Base.set(this.model, this.getResource(), ABSTRACT, value);
	}
  


    /**
     * Removes a value of property Abstract as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removebiboAbstract( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ABSTRACT, value);
	}
	
    /**
     * Removes a value of property Abstract as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removebiboAbstract( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ABSTRACT, value);
	}
    /**
     * Removes a value of property Abstract given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removebiboAbstract(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, ABSTRACT, value);
	}
	
    /**
     * Removes a value of property Abstract given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removebiboAbstract(java.lang.String value) {
		Base.remove(this.model, this.getResource(), ABSTRACT, value);
	}
  
    /**
     * Removes all values of property Abstract     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllbiboAbstract( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ABSTRACT);
	}
	
    /**
     * Removes all values of property Abstract	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllbiboAbstract() {
		Base.removeAll(this.model, this.getResource(), ABSTRACT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2c274b has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasbiboAllValuesFrom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ALLVALUESFROM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2c274b has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasbiboAllValuesFrom() {
		return Base.has(this.model, this.getResource(), ALLVALUESFROM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2c274b has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasbiboAllValuesFrom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ALLVALUESFROM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2c274b has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasbiboAllValuesFrom( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ALLVALUESFROM);
	}

     /**
     * Get all values of property AllValuesFrom as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboAllValuesFrom_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ALLVALUESFROM);
	}
	
    /**
     * Get all values of property AllValuesFrom as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboAllValuesFrom_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ALLVALUESFROM, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property AllValuesFrom as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboAllValuesFrom_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ALLVALUESFROM);
	}

    /**
     * Get all values of property AllValuesFrom as a ReactorResult of RDF2Go nodes 
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboAllValuesFrom_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ALLVALUESFROM, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property AllValuesFrom     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllbiboAllValuesFrom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ALLVALUESFROM, Thing.class);
	}
	
    /**
     * Get all values of property AllValuesFrom as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllbiboAllValuesFrom_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ALLVALUESFROM, Thing.class);
	}

    /**
     * Get all values of property AllValuesFrom     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllbiboAllValuesFrom() {
		return Base.getAll(this.model, this.getResource(), ALLVALUESFROM, Thing.class);
	}

    /**
     * Get all values of property AllValuesFrom as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllbiboAllValuesFrom_as() {
		return Base.getAll_as(this.model, this.getResource(), ALLVALUESFROM, Thing.class);
	}
 
    /**
     * Adds a value to property AllValuesFrom as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addbiboAllValuesFrom( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ALLVALUESFROM, value);
	}
	
    /**
     * Adds a value to property AllValuesFrom as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addbiboAllValuesFrom( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ALLVALUESFROM, value);
	}
    /**
     * Adds a value to property AllValuesFrom from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addbiboAllValuesFrom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, ALLVALUESFROM, value);
	}
	
    /**
     * Adds a value to property AllValuesFrom from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addbiboAllValuesFrom(Thing value) {
		Base.add(this.model, this.getResource(), ALLVALUESFROM, value);
	}
  

    /**
     * Sets a value of property AllValuesFrom from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setbiboAllValuesFrom( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ALLVALUESFROM, value);
	}
	
    /**
     * Sets a value of property AllValuesFrom from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setbiboAllValuesFrom( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ALLVALUESFROM, value);
	}
    /**
     * Sets a value of property AllValuesFrom from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setbiboAllValuesFrom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, ALLVALUESFROM, value);
	}
	
    /**
     * Sets a value of property AllValuesFrom from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setbiboAllValuesFrom(Thing value) {
		Base.set(this.model, this.getResource(), ALLVALUESFROM, value);
	}
  


    /**
     * Removes a value of property AllValuesFrom as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removebiboAllValuesFrom( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ALLVALUESFROM, value);
	}
	
    /**
     * Removes a value of property AllValuesFrom as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removebiboAllValuesFrom( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ALLVALUESFROM, value);
	}
    /**
     * Removes a value of property AllValuesFrom given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removebiboAllValuesFrom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, ALLVALUESFROM, value);
	}
	
    /**
     * Removes a value of property AllValuesFrom given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removebiboAllValuesFrom(Thing value) {
		Base.remove(this.model, this.getResource(), ALLVALUESFROM, value);
	}
  
    /**
     * Removes all values of property AllValuesFrom     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllbiboAllValuesFrom( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ALLVALUESFROM);
	}
	
    /**
     * Removes all values of property AllValuesFrom	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllbiboAllValuesFrom() {
		Base.removeAll(this.model, this.getResource(), ALLVALUESFROM);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c840ec has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasbiboChangeNote(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, CHANGENOTE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c840ec has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasbiboChangeNote() {
		return Base.has(this.model, this.getResource(), CHANGENOTE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c840ec has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasbiboChangeNote(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, CHANGENOTE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c840ec has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasbiboChangeNote( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), CHANGENOTE);
	}

     /**
     * Get all values of property ChangeNote as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboChangeNote_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, CHANGENOTE);
	}
	
    /**
     * Get all values of property ChangeNote as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboChangeNote_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CHANGENOTE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ChangeNote as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboChangeNote_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), CHANGENOTE);
	}

    /**
     * Get all values of property ChangeNote as a ReactorResult of RDF2Go nodes 
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboChangeNote_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), CHANGENOTE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ChangeNote     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllbiboChangeNote(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, CHANGENOTE, Thing.class);
	}
	
    /**
     * Get all values of property ChangeNote as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllbiboChangeNote_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CHANGENOTE, Thing.class);
	}

    /**
     * Get all values of property ChangeNote     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllbiboChangeNote() {
		return Base.getAll(this.model, this.getResource(), CHANGENOTE, Thing.class);
	}

    /**
     * Get all values of property ChangeNote as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllbiboChangeNote_as() {
		return Base.getAll_as(this.model, this.getResource(), CHANGENOTE, Thing.class);
	}
 
    /**
     * Adds a value to property ChangeNote as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addbiboChangeNote( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, CHANGENOTE, value);
	}
	
    /**
     * Adds a value to property ChangeNote as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addbiboChangeNote( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), CHANGENOTE, value);
	}
    /**
     * Adds a value to property ChangeNote from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addbiboChangeNote(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, CHANGENOTE, value);
	}
	
    /**
     * Adds a value to property ChangeNote from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addbiboChangeNote(Thing value) {
		Base.add(this.model, this.getResource(), CHANGENOTE, value);
	}
  

    /**
     * Sets a value of property ChangeNote from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setbiboChangeNote( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, CHANGENOTE, value);
	}
	
    /**
     * Sets a value of property ChangeNote from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setbiboChangeNote( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), CHANGENOTE, value);
	}
    /**
     * Sets a value of property ChangeNote from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setbiboChangeNote(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, CHANGENOTE, value);
	}
	
    /**
     * Sets a value of property ChangeNote from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setbiboChangeNote(Thing value) {
		Base.set(this.model, this.getResource(), CHANGENOTE, value);
	}
  


    /**
     * Removes a value of property ChangeNote as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removebiboChangeNote( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, CHANGENOTE, value);
	}
	
    /**
     * Removes a value of property ChangeNote as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removebiboChangeNote( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), CHANGENOTE, value);
	}
    /**
     * Removes a value of property ChangeNote given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removebiboChangeNote(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, CHANGENOTE, value);
	}
	
    /**
     * Removes a value of property ChangeNote given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removebiboChangeNote(Thing value) {
		Base.remove(this.model, this.getResource(), CHANGENOTE, value);
	}
  
    /**
     * Removes all values of property ChangeNote     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllbiboChangeNote( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, CHANGENOTE);
	}
	
    /**
     * Removes all values of property ChangeNote	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllbiboChangeNote() {
		Base.removeAll(this.model, this.getResource(), CHANGENOTE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4417e9 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasbiboContributor(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, CONTRIBUTOR);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4417e9 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasbiboContributor() {
		return Base.has(this.model, this.getResource(), CONTRIBUTOR);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4417e9 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasbiboContributor(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, CONTRIBUTOR);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4417e9 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasbiboContributor( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), CONTRIBUTOR);
	}

     /**
     * Get all values of property Contributor as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboContributor_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, CONTRIBUTOR);
	}
	
    /**
     * Get all values of property Contributor as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboContributor_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CONTRIBUTOR, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Contributor as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboContributor_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), CONTRIBUTOR);
	}

    /**
     * Get all values of property Contributor as a ReactorResult of RDF2Go nodes 
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboContributor_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), CONTRIBUTOR, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Contributor     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllbiboContributor(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, CONTRIBUTOR, Thing.class);
	}
	
    /**
     * Get all values of property Contributor as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllbiboContributor_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CONTRIBUTOR, Thing.class);
	}

    /**
     * Get all values of property Contributor     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllbiboContributor() {
		return Base.getAll(this.model, this.getResource(), CONTRIBUTOR, Thing.class);
	}

    /**
     * Get all values of property Contributor as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllbiboContributor_as() {
		return Base.getAll_as(this.model, this.getResource(), CONTRIBUTOR, Thing.class);
	}
 
    /**
     * Adds a value to property Contributor as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addbiboContributor( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, CONTRIBUTOR, value);
	}
	
    /**
     * Adds a value to property Contributor as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addbiboContributor( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), CONTRIBUTOR, value);
	}
    /**
     * Adds a value to property Contributor from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addbiboContributor(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, CONTRIBUTOR, value);
	}
	
    /**
     * Adds a value to property Contributor from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addbiboContributor(Thing value) {
		Base.add(this.model, this.getResource(), CONTRIBUTOR, value);
	}
  

    /**
     * Sets a value of property Contributor from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setbiboContributor( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, CONTRIBUTOR, value);
	}
	
    /**
     * Sets a value of property Contributor from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setbiboContributor( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), CONTRIBUTOR, value);
	}
    /**
     * Sets a value of property Contributor from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setbiboContributor(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, CONTRIBUTOR, value);
	}
	
    /**
     * Sets a value of property Contributor from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setbiboContributor(Thing value) {
		Base.set(this.model, this.getResource(), CONTRIBUTOR, value);
	}
  


    /**
     * Removes a value of property Contributor as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removebiboContributor( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, CONTRIBUTOR, value);
	}
	
    /**
     * Removes a value of property Contributor as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removebiboContributor( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), CONTRIBUTOR, value);
	}
    /**
     * Removes a value of property Contributor given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removebiboContributor(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, CONTRIBUTOR, value);
	}
	
    /**
     * Removes a value of property Contributor given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removebiboContributor(Thing value) {
		Base.remove(this.model, this.getResource(), CONTRIBUTOR, value);
	}
  
    /**
     * Removes all values of property Contributor     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllbiboContributor( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, CONTRIBUTOR);
	}
	
    /**
     * Removes all values of property Contributor	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllbiboContributor() {
		Base.removeAll(this.model, this.getResource(), CONTRIBUTOR);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7eb0b6 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasbiboCreated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, CREATED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7eb0b6 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasbiboCreated() {
		return Base.has(this.model, this.getResource(), CREATED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7eb0b6 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasbiboCreated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, CREATED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7eb0b6 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasbiboCreated( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), CREATED);
	}

     /**
     * Get all values of property Created as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboCreated_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, CREATED);
	}
	
    /**
     * Get all values of property Created as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboCreated_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CREATED, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Created as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboCreated_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), CREATED);
	}

    /**
     * Get all values of property Created as a ReactorResult of RDF2Go nodes 
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboCreated_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), CREATED, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Created     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllbiboCreated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, CREATED, Thing.class);
	}
	
    /**
     * Get all values of property Created as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllbiboCreated_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CREATED, Thing.class);
	}

    /**
     * Get all values of property Created     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllbiboCreated() {
		return Base.getAll(this.model, this.getResource(), CREATED, Thing.class);
	}

    /**
     * Get all values of property Created as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllbiboCreated_as() {
		return Base.getAll_as(this.model, this.getResource(), CREATED, Thing.class);
	}
 
    /**
     * Adds a value to property Created as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addbiboCreated( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, CREATED, value);
	}
	
    /**
     * Adds a value to property Created as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addbiboCreated( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), CREATED, value);
	}
    /**
     * Adds a value to property Created from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addbiboCreated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, CREATED, value);
	}
	
    /**
     * Adds a value to property Created from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addbiboCreated(Thing value) {
		Base.add(this.model, this.getResource(), CREATED, value);
	}
  

    /**
     * Sets a value of property Created from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setbiboCreated( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, CREATED, value);
	}
	
    /**
     * Sets a value of property Created from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setbiboCreated( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), CREATED, value);
	}
    /**
     * Sets a value of property Created from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setbiboCreated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, CREATED, value);
	}
	
    /**
     * Sets a value of property Created from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setbiboCreated(Thing value) {
		Base.set(this.model, this.getResource(), CREATED, value);
	}
  


    /**
     * Removes a value of property Created as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removebiboCreated( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, CREATED, value);
	}
	
    /**
     * Removes a value of property Created as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removebiboCreated( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), CREATED, value);
	}
    /**
     * Removes a value of property Created given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removebiboCreated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, CREATED, value);
	}
	
    /**
     * Removes a value of property Created given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removebiboCreated(Thing value) {
		Base.remove(this.model, this.getResource(), CREATED, value);
	}
  
    /**
     * Removes all values of property Created     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllbiboCreated( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, CREATED);
	}
	
    /**
     * Removes all values of property Created	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllbiboCreated() {
		Base.removeAll(this.model, this.getResource(), CREATED);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@aecb62 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasbiboCreator(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, CREATOR);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@aecb62 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasbiboCreator() {
		return Base.has(this.model, this.getResource(), CREATOR);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@aecb62 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasbiboCreator(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, CREATOR);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@aecb62 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasbiboCreator( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), CREATOR);
	}

     /**
     * Get all values of property Creator as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboCreator_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, CREATOR);
	}
	
    /**
     * Get all values of property Creator as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboCreator_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CREATOR, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Creator as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboCreator_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), CREATOR);
	}

    /**
     * Get all values of property Creator as a ReactorResult of RDF2Go nodes 
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboCreator_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), CREATOR, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Creator     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllbiboCreator(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, CREATOR, Thing.class);
	}
	
    /**
     * Get all values of property Creator as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllbiboCreator_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CREATOR, Thing.class);
	}

    /**
     * Get all values of property Creator     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllbiboCreator() {
		return Base.getAll(this.model, this.getResource(), CREATOR, Thing.class);
	}

    /**
     * Get all values of property Creator as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllbiboCreator_as() {
		return Base.getAll_as(this.model, this.getResource(), CREATOR, Thing.class);
	}
 
    /**
     * Adds a value to property Creator as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addbiboCreator( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, CREATOR, value);
	}
	
    /**
     * Adds a value to property Creator as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addbiboCreator( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), CREATOR, value);
	}
    /**
     * Adds a value to property Creator from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addbiboCreator(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, CREATOR, value);
	}
	
    /**
     * Adds a value to property Creator from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addbiboCreator(Thing value) {
		Base.add(this.model, this.getResource(), CREATOR, value);
	}
  

    /**
     * Sets a value of property Creator from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setbiboCreator( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, CREATOR, value);
	}
	
    /**
     * Sets a value of property Creator from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setbiboCreator( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), CREATOR, value);
	}
    /**
     * Sets a value of property Creator from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setbiboCreator(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, CREATOR, value);
	}
	
    /**
     * Sets a value of property Creator from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setbiboCreator(Thing value) {
		Base.set(this.model, this.getResource(), CREATOR, value);
	}
  


    /**
     * Removes a value of property Creator as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removebiboCreator( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, CREATOR, value);
	}
	
    /**
     * Removes a value of property Creator as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removebiboCreator( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), CREATOR, value);
	}
    /**
     * Removes a value of property Creator given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removebiboCreator(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, CREATOR, value);
	}
	
    /**
     * Removes a value of property Creator given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removebiboCreator(Thing value) {
		Base.remove(this.model, this.getResource(), CREATOR, value);
	}
  
    /**
     * Removes all values of property Creator     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllbiboCreator( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, CREATOR);
	}
	
    /**
     * Removes all values of property Creator	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllbiboCreator() {
		Base.removeAll(this.model, this.getResource(), CREATOR);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@195f6f3 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasbiboDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, DATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@195f6f3 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasbiboDate() {
		return Base.has(this.model, this.getResource(), DATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@195f6f3 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasbiboDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, DATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@195f6f3 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasbiboDate( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), DATE);
	}

     /**
     * Get all values of property Date as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboDate_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, DATE);
	}
	
    /**
     * Get all values of property Date as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboDate_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DATE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Date as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboDate_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), DATE);
	}

    /**
     * Get all values of property Date as a ReactorResult of RDF2Go nodes 
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboDate_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), DATE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Date     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllbiboDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, DATE, Thing.class);
	}
	
    /**
     * Get all values of property Date as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllbiboDate_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DATE, Thing.class);
	}

    /**
     * Get all values of property Date     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllbiboDate() {
		return Base.getAll(this.model, this.getResource(), DATE, Thing.class);
	}

    /**
     * Get all values of property Date as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllbiboDate_as() {
		return Base.getAll_as(this.model, this.getResource(), DATE, Thing.class);
	}
 
    /**
     * Adds a value to property Date as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addbiboDate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, DATE, value);
	}
	
    /**
     * Adds a value to property Date as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addbiboDate( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), DATE, value);
	}
    /**
     * Adds a value to property Date from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addbiboDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, DATE, value);
	}
	
    /**
     * Adds a value to property Date from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addbiboDate(Thing value) {
		Base.add(this.model, this.getResource(), DATE, value);
	}
  

    /**
     * Sets a value of property Date from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setbiboDate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, DATE, value);
	}
	
    /**
     * Sets a value of property Date from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setbiboDate( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), DATE, value);
	}
    /**
     * Sets a value of property Date from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setbiboDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, DATE, value);
	}
	
    /**
     * Sets a value of property Date from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setbiboDate(Thing value) {
		Base.set(this.model, this.getResource(), DATE, value);
	}
  


    /**
     * Removes a value of property Date as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removebiboDate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, DATE, value);
	}
	
    /**
     * Removes a value of property Date as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removebiboDate( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), DATE, value);
	}
    /**
     * Removes a value of property Date given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removebiboDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, DATE, value);
	}
	
    /**
     * Removes a value of property Date given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removebiboDate(Thing value) {
		Base.remove(this.model, this.getResource(), DATE, value);
	}
  
    /**
     * Removes all values of property Date     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllbiboDate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, DATE);
	}
	
    /**
     * Removes all values of property Date	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllbiboDate() {
		Base.removeAll(this.model, this.getResource(), DATE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@151c2f8 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasbiboDeprecated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, DEPRECATED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@151c2f8 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasbiboDeprecated() {
		return Base.has(this.model, this.getResource(), DEPRECATED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@151c2f8 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasbiboDeprecated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, DEPRECATED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@151c2f8 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasbiboDeprecated( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), DEPRECATED);
	}

     /**
     * Get all values of property Deprecated as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboDeprecated_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, DEPRECATED);
	}
	
    /**
     * Get all values of property Deprecated as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboDeprecated_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DEPRECATED, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Deprecated as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboDeprecated_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), DEPRECATED);
	}

    /**
     * Get all values of property Deprecated as a ReactorResult of RDF2Go nodes 
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboDeprecated_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), DEPRECATED, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Deprecated     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllbiboDeprecated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, DEPRECATED, Thing.class);
	}
	
    /**
     * Get all values of property Deprecated as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllbiboDeprecated_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DEPRECATED, Thing.class);
	}

    /**
     * Get all values of property Deprecated     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllbiboDeprecated() {
		return Base.getAll(this.model, this.getResource(), DEPRECATED, Thing.class);
	}

    /**
     * Get all values of property Deprecated as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllbiboDeprecated_as() {
		return Base.getAll_as(this.model, this.getResource(), DEPRECATED, Thing.class);
	}
 
    /**
     * Adds a value to property Deprecated as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addbiboDeprecated( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, DEPRECATED, value);
	}
	
    /**
     * Adds a value to property Deprecated as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addbiboDeprecated( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), DEPRECATED, value);
	}
    /**
     * Adds a value to property Deprecated from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addbiboDeprecated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, DEPRECATED, value);
	}
	
    /**
     * Adds a value to property Deprecated from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addbiboDeprecated(Thing value) {
		Base.add(this.model, this.getResource(), DEPRECATED, value);
	}
  

    /**
     * Sets a value of property Deprecated from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setbiboDeprecated( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, DEPRECATED, value);
	}
	
    /**
     * Sets a value of property Deprecated from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setbiboDeprecated( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), DEPRECATED, value);
	}
    /**
     * Sets a value of property Deprecated from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setbiboDeprecated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, DEPRECATED, value);
	}
	
    /**
     * Sets a value of property Deprecated from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setbiboDeprecated(Thing value) {
		Base.set(this.model, this.getResource(), DEPRECATED, value);
	}
  


    /**
     * Removes a value of property Deprecated as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removebiboDeprecated( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, DEPRECATED, value);
	}
	
    /**
     * Removes a value of property Deprecated as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removebiboDeprecated( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), DEPRECATED, value);
	}
    /**
     * Removes a value of property Deprecated given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removebiboDeprecated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, DEPRECATED, value);
	}
	
    /**
     * Removes a value of property Deprecated given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removebiboDeprecated(Thing value) {
		Base.remove(this.model, this.getResource(), DEPRECATED, value);
	}
  
    /**
     * Removes all values of property Deprecated     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllbiboDeprecated( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, DEPRECATED);
	}
	
    /**
     * Removes all values of property Deprecated	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllbiboDeprecated() {
		Base.removeAll(this.model, this.getResource(), DEPRECATED);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1ba9b02 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasbiboDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, DESCRIPTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1ba9b02 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasbiboDescription() {
		return Base.has(this.model, this.getResource(), DESCRIPTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1ba9b02 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasbiboDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, DESCRIPTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1ba9b02 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasbiboDescription( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), DESCRIPTION);
	}

     /**
     * Get all values of property Description as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboDescription_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, DESCRIPTION);
	}
	
    /**
     * Get all values of property Description as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboDescription_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DESCRIPTION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Description as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboDescription_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), DESCRIPTION);
	}

    /**
     * Get all values of property Description as a ReactorResult of RDF2Go nodes 
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboDescription_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), DESCRIPTION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Description     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllbiboDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, DESCRIPTION, Thing.class);
	}
	
    /**
     * Get all values of property Description as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllbiboDescription_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DESCRIPTION, Thing.class);
	}

    /**
     * Get all values of property Description     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllbiboDescription() {
		return Base.getAll(this.model, this.getResource(), DESCRIPTION, Thing.class);
	}

    /**
     * Get all values of property Description as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllbiboDescription_as() {
		return Base.getAll_as(this.model, this.getResource(), DESCRIPTION, Thing.class);
	}
 
    /**
     * Adds a value to property Description as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addbiboDescription( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, DESCRIPTION, value);
	}
	
    /**
     * Adds a value to property Description as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addbiboDescription( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), DESCRIPTION, value);
	}
    /**
     * Adds a value to property Description from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addbiboDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, DESCRIPTION, value);
	}
	
    /**
     * Adds a value to property Description from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addbiboDescription(Thing value) {
		Base.add(this.model, this.getResource(), DESCRIPTION, value);
	}
  

    /**
     * Sets a value of property Description from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setbiboDescription( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, DESCRIPTION, value);
	}
	
    /**
     * Sets a value of property Description from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setbiboDescription( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), DESCRIPTION, value);
	}
    /**
     * Sets a value of property Description from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setbiboDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, DESCRIPTION, value);
	}
	
    /**
     * Sets a value of property Description from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setbiboDescription(Thing value) {
		Base.set(this.model, this.getResource(), DESCRIPTION, value);
	}
  


    /**
     * Removes a value of property Description as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removebiboDescription( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, DESCRIPTION, value);
	}
	
    /**
     * Removes a value of property Description as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removebiboDescription( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), DESCRIPTION, value);
	}
    /**
     * Removes a value of property Description given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removebiboDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, DESCRIPTION, value);
	}
	
    /**
     * Removes a value of property Description given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removebiboDescription(Thing value) {
		Base.remove(this.model, this.getResource(), DESCRIPTION, value);
	}
  
    /**
     * Removes all values of property Description     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllbiboDescription( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, DESCRIPTION);
	}
	
    /**
     * Removes all values of property Description	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllbiboDescription() {
		Base.removeAll(this.model, this.getResource(), DESCRIPTION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@e25383 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasbiboEditorialNote(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EDITORIALNOTE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@e25383 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasbiboEditorialNote() {
		return Base.has(this.model, this.getResource(), EDITORIALNOTE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@e25383 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasbiboEditorialNote(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EDITORIALNOTE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@e25383 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasbiboEditorialNote( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EDITORIALNOTE);
	}

     /**
     * Get all values of property EditorialNote as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboEditorialNote_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EDITORIALNOTE);
	}
	
    /**
     * Get all values of property EditorialNote as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboEditorialNote_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EDITORIALNOTE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property EditorialNote as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboEditorialNote_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EDITORIALNOTE);
	}

    /**
     * Get all values of property EditorialNote as a ReactorResult of RDF2Go nodes 
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboEditorialNote_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EDITORIALNOTE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property EditorialNote     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllbiboEditorialNote(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EDITORIALNOTE, Thing.class);
	}
	
    /**
     * Get all values of property EditorialNote as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllbiboEditorialNote_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EDITORIALNOTE, Thing.class);
	}

    /**
     * Get all values of property EditorialNote     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllbiboEditorialNote() {
		return Base.getAll(this.model, this.getResource(), EDITORIALNOTE, Thing.class);
	}

    /**
     * Get all values of property EditorialNote as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllbiboEditorialNote_as() {
		return Base.getAll_as(this.model, this.getResource(), EDITORIALNOTE, Thing.class);
	}
 
    /**
     * Adds a value to property EditorialNote as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addbiboEditorialNote( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EDITORIALNOTE, value);
	}
	
    /**
     * Adds a value to property EditorialNote as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addbiboEditorialNote( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EDITORIALNOTE, value);
	}
    /**
     * Adds a value to property EditorialNote from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addbiboEditorialNote(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, EDITORIALNOTE, value);
	}
	
    /**
     * Adds a value to property EditorialNote from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addbiboEditorialNote(Thing value) {
		Base.add(this.model, this.getResource(), EDITORIALNOTE, value);
	}
  

    /**
     * Sets a value of property EditorialNote from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setbiboEditorialNote( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EDITORIALNOTE, value);
	}
	
    /**
     * Sets a value of property EditorialNote from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setbiboEditorialNote( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EDITORIALNOTE, value);
	}
    /**
     * Sets a value of property EditorialNote from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setbiboEditorialNote(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, EDITORIALNOTE, value);
	}
	
    /**
     * Sets a value of property EditorialNote from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setbiboEditorialNote(Thing value) {
		Base.set(this.model, this.getResource(), EDITORIALNOTE, value);
	}
  


    /**
     * Removes a value of property EditorialNote as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removebiboEditorialNote( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EDITORIALNOTE, value);
	}
	
    /**
     * Removes a value of property EditorialNote as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removebiboEditorialNote( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EDITORIALNOTE, value);
	}
    /**
     * Removes a value of property EditorialNote given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removebiboEditorialNote(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, EDITORIALNOTE, value);
	}
	
    /**
     * Removes a value of property EditorialNote given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removebiboEditorialNote(Thing value) {
		Base.remove(this.model, this.getResource(), EDITORIALNOTE, value);
	}
  
    /**
     * Removes all values of property EditorialNote     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllbiboEditorialNote( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EDITORIALNOTE);
	}
	
    /**
     * Removes all values of property EditorialNote	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllbiboEditorialNote() {
		Base.removeAll(this.model, this.getResource(), EDITORIALNOTE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@337339 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasbiboEquivalentClass(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EQUIVALENTCLASS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@337339 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasbiboEquivalentClass() {
		return Base.has(this.model, this.getResource(), EQUIVALENTCLASS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@337339 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasbiboEquivalentClass(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EQUIVALENTCLASS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@337339 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasbiboEquivalentClass( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EQUIVALENTCLASS);
	}

     /**
     * Get all values of property EquivalentClass as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboEquivalentClass_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EQUIVALENTCLASS);
	}
	
    /**
     * Get all values of property EquivalentClass as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboEquivalentClass_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EQUIVALENTCLASS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property EquivalentClass as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboEquivalentClass_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EQUIVALENTCLASS);
	}

    /**
     * Get all values of property EquivalentClass as a ReactorResult of RDF2Go nodes 
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboEquivalentClass_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EQUIVALENTCLASS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property EquivalentClass     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllbiboEquivalentClass(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EQUIVALENTCLASS, Thing.class);
	}
	
    /**
     * Get all values of property EquivalentClass as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllbiboEquivalentClass_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EQUIVALENTCLASS, Thing.class);
	}

    /**
     * Get all values of property EquivalentClass     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllbiboEquivalentClass() {
		return Base.getAll(this.model, this.getResource(), EQUIVALENTCLASS, Thing.class);
	}

    /**
     * Get all values of property EquivalentClass as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllbiboEquivalentClass_as() {
		return Base.getAll_as(this.model, this.getResource(), EQUIVALENTCLASS, Thing.class);
	}
 
    /**
     * Adds a value to property EquivalentClass as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addbiboEquivalentClass( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EQUIVALENTCLASS, value);
	}
	
    /**
     * Adds a value to property EquivalentClass as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addbiboEquivalentClass( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EQUIVALENTCLASS, value);
	}
    /**
     * Adds a value to property EquivalentClass from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addbiboEquivalentClass(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, EQUIVALENTCLASS, value);
	}
	
    /**
     * Adds a value to property EquivalentClass from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addbiboEquivalentClass(Thing value) {
		Base.add(this.model, this.getResource(), EQUIVALENTCLASS, value);
	}
  

    /**
     * Sets a value of property EquivalentClass from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setbiboEquivalentClass( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EQUIVALENTCLASS, value);
	}
	
    /**
     * Sets a value of property EquivalentClass from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setbiboEquivalentClass( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EQUIVALENTCLASS, value);
	}
    /**
     * Sets a value of property EquivalentClass from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setbiboEquivalentClass(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, EQUIVALENTCLASS, value);
	}
	
    /**
     * Sets a value of property EquivalentClass from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setbiboEquivalentClass(Thing value) {
		Base.set(this.model, this.getResource(), EQUIVALENTCLASS, value);
	}
  


    /**
     * Removes a value of property EquivalentClass as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removebiboEquivalentClass( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EQUIVALENTCLASS, value);
	}
	
    /**
     * Removes a value of property EquivalentClass as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removebiboEquivalentClass( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EQUIVALENTCLASS, value);
	}
    /**
     * Removes a value of property EquivalentClass given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removebiboEquivalentClass(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, EQUIVALENTCLASS, value);
	}
	
    /**
     * Removes a value of property EquivalentClass given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removebiboEquivalentClass(Thing value) {
		Base.remove(this.model, this.getResource(), EQUIVALENTCLASS, value);
	}
  
    /**
     * Removes all values of property EquivalentClass     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllbiboEquivalentClass( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EQUIVALENTCLASS);
	}
	
    /**
     * Removes all values of property EquivalentClass	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllbiboEquivalentClass() {
		Base.removeAll(this.model, this.getResource(), EQUIVALENTCLASS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@68365a has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasbiboEquivalentProperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EQUIVALENTPROPERTY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@68365a has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasbiboEquivalentProperty() {
		return Base.has(this.model, this.getResource(), EQUIVALENTPROPERTY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@68365a has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasbiboEquivalentProperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EQUIVALENTPROPERTY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@68365a has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasbiboEquivalentProperty( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EQUIVALENTPROPERTY);
	}

     /**
     * Get all values of property EquivalentProperty as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboEquivalentProperty_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EQUIVALENTPROPERTY);
	}
	
    /**
     * Get all values of property EquivalentProperty as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboEquivalentProperty_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EQUIVALENTPROPERTY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property EquivalentProperty as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboEquivalentProperty_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EQUIVALENTPROPERTY);
	}

    /**
     * Get all values of property EquivalentProperty as a ReactorResult of RDF2Go nodes 
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboEquivalentProperty_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EQUIVALENTPROPERTY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property EquivalentProperty     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllbiboEquivalentProperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EQUIVALENTPROPERTY, Thing.class);
	}
	
    /**
     * Get all values of property EquivalentProperty as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllbiboEquivalentProperty_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EQUIVALENTPROPERTY, Thing.class);
	}

    /**
     * Get all values of property EquivalentProperty     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllbiboEquivalentProperty() {
		return Base.getAll(this.model, this.getResource(), EQUIVALENTPROPERTY, Thing.class);
	}

    /**
     * Get all values of property EquivalentProperty as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllbiboEquivalentProperty_as() {
		return Base.getAll_as(this.model, this.getResource(), EQUIVALENTPROPERTY, Thing.class);
	}
 
    /**
     * Adds a value to property EquivalentProperty as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addbiboEquivalentProperty( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EQUIVALENTPROPERTY, value);
	}
	
    /**
     * Adds a value to property EquivalentProperty as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addbiboEquivalentProperty( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EQUIVALENTPROPERTY, value);
	}
    /**
     * Adds a value to property EquivalentProperty from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addbiboEquivalentProperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, EQUIVALENTPROPERTY, value);
	}
	
    /**
     * Adds a value to property EquivalentProperty from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addbiboEquivalentProperty(Thing value) {
		Base.add(this.model, this.getResource(), EQUIVALENTPROPERTY, value);
	}
  

    /**
     * Sets a value of property EquivalentProperty from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setbiboEquivalentProperty( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EQUIVALENTPROPERTY, value);
	}
	
    /**
     * Sets a value of property EquivalentProperty from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setbiboEquivalentProperty( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EQUIVALENTPROPERTY, value);
	}
    /**
     * Sets a value of property EquivalentProperty from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setbiboEquivalentProperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, EQUIVALENTPROPERTY, value);
	}
	
    /**
     * Sets a value of property EquivalentProperty from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setbiboEquivalentProperty(Thing value) {
		Base.set(this.model, this.getResource(), EQUIVALENTPROPERTY, value);
	}
  


    /**
     * Removes a value of property EquivalentProperty as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removebiboEquivalentProperty( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EQUIVALENTPROPERTY, value);
	}
	
    /**
     * Removes a value of property EquivalentProperty as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removebiboEquivalentProperty( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EQUIVALENTPROPERTY, value);
	}
    /**
     * Removes a value of property EquivalentProperty given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removebiboEquivalentProperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, EQUIVALENTPROPERTY, value);
	}
	
    /**
     * Removes a value of property EquivalentProperty given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removebiboEquivalentProperty(Thing value) {
		Base.remove(this.model, this.getResource(), EQUIVALENTPROPERTY, value);
	}
  
    /**
     * Removes all values of property EquivalentProperty     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllbiboEquivalentProperty( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EQUIVALENTPROPERTY);
	}
	
    /**
     * Removes all values of property EquivalentProperty	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllbiboEquivalentProperty() {
		Base.removeAll(this.model, this.getResource(), EQUIVALENTPROPERTY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@a5446b has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasbiboExample(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXAMPLE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@a5446b has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasbiboExample() {
		return Base.has(this.model, this.getResource(), EXAMPLE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@a5446b has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasbiboExample(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXAMPLE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@a5446b has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasbiboExample( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXAMPLE);
	}

     /**
     * Get all values of property Example as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboExample_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXAMPLE);
	}
	
    /**
     * Get all values of property Example as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboExample_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXAMPLE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Example as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboExample_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXAMPLE);
	}

    /**
     * Get all values of property Example as a ReactorResult of RDF2Go nodes 
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboExample_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXAMPLE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Example     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllbiboExample(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXAMPLE, Thing.class);
	}
	
    /**
     * Get all values of property Example as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllbiboExample_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXAMPLE, Thing.class);
	}

    /**
     * Get all values of property Example     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllbiboExample() {
		return Base.getAll(this.model, this.getResource(), EXAMPLE, Thing.class);
	}

    /**
     * Get all values of property Example as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllbiboExample_as() {
		return Base.getAll_as(this.model, this.getResource(), EXAMPLE, Thing.class);
	}
 
    /**
     * Adds a value to property Example as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addbiboExample( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXAMPLE, value);
	}
	
    /**
     * Adds a value to property Example as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addbiboExample( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXAMPLE, value);
	}
    /**
     * Adds a value to property Example from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addbiboExample(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, EXAMPLE, value);
	}
	
    /**
     * Adds a value to property Example from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addbiboExample(Thing value) {
		Base.add(this.model, this.getResource(), EXAMPLE, value);
	}
  

    /**
     * Sets a value of property Example from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setbiboExample( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXAMPLE, value);
	}
	
    /**
     * Sets a value of property Example from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setbiboExample( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXAMPLE, value);
	}
    /**
     * Sets a value of property Example from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setbiboExample(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, EXAMPLE, value);
	}
	
    /**
     * Sets a value of property Example from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setbiboExample(Thing value) {
		Base.set(this.model, this.getResource(), EXAMPLE, value);
	}
  


    /**
     * Removes a value of property Example as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removebiboExample( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXAMPLE, value);
	}
	
    /**
     * Removes a value of property Example as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removebiboExample( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXAMPLE, value);
	}
    /**
     * Removes a value of property Example given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removebiboExample(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, EXAMPLE, value);
	}
	
    /**
     * Removes a value of property Example given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removebiboExample(Thing value) {
		Base.remove(this.model, this.getResource(), EXAMPLE, value);
	}
  
    /**
     * Removes all values of property Example     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllbiboExample( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXAMPLE);
	}
	
    /**
     * Removes all values of property Example	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllbiboExample() {
		Base.removeAll(this.model, this.getResource(), EXAMPLE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1a8d589 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasbiboHistoryNote(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, HISTORYNOTE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1a8d589 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasbiboHistoryNote() {
		return Base.has(this.model, this.getResource(), HISTORYNOTE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1a8d589 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasbiboHistoryNote(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, HISTORYNOTE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1a8d589 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasbiboHistoryNote( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), HISTORYNOTE);
	}

     /**
     * Get all values of property HistoryNote as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboHistoryNote_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, HISTORYNOTE);
	}
	
    /**
     * Get all values of property HistoryNote as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboHistoryNote_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, HISTORYNOTE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property HistoryNote as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboHistoryNote_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), HISTORYNOTE);
	}

    /**
     * Get all values of property HistoryNote as a ReactorResult of RDF2Go nodes 
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboHistoryNote_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), HISTORYNOTE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property HistoryNote     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllbiboHistoryNote(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, HISTORYNOTE, Thing.class);
	}
	
    /**
     * Get all values of property HistoryNote as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllbiboHistoryNote_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, HISTORYNOTE, Thing.class);
	}

    /**
     * Get all values of property HistoryNote     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllbiboHistoryNote() {
		return Base.getAll(this.model, this.getResource(), HISTORYNOTE, Thing.class);
	}

    /**
     * Get all values of property HistoryNote as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllbiboHistoryNote_as() {
		return Base.getAll_as(this.model, this.getResource(), HISTORYNOTE, Thing.class);
	}
 
    /**
     * Adds a value to property HistoryNote as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addbiboHistoryNote( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, HISTORYNOTE, value);
	}
	
    /**
     * Adds a value to property HistoryNote as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addbiboHistoryNote( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), HISTORYNOTE, value);
	}
    /**
     * Adds a value to property HistoryNote from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addbiboHistoryNote(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, HISTORYNOTE, value);
	}
	
    /**
     * Adds a value to property HistoryNote from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addbiboHistoryNote(Thing value) {
		Base.add(this.model, this.getResource(), HISTORYNOTE, value);
	}
  

    /**
     * Sets a value of property HistoryNote from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setbiboHistoryNote( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, HISTORYNOTE, value);
	}
	
    /**
     * Sets a value of property HistoryNote from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setbiboHistoryNote( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), HISTORYNOTE, value);
	}
    /**
     * Sets a value of property HistoryNote from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setbiboHistoryNote(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, HISTORYNOTE, value);
	}
	
    /**
     * Sets a value of property HistoryNote from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setbiboHistoryNote(Thing value) {
		Base.set(this.model, this.getResource(), HISTORYNOTE, value);
	}
  


    /**
     * Removes a value of property HistoryNote as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removebiboHistoryNote( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, HISTORYNOTE, value);
	}
	
    /**
     * Removes a value of property HistoryNote as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removebiboHistoryNote( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), HISTORYNOTE, value);
	}
    /**
     * Removes a value of property HistoryNote given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removebiboHistoryNote(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, HISTORYNOTE, value);
	}
	
    /**
     * Removes a value of property HistoryNote given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removebiboHistoryNote(Thing value) {
		Base.remove(this.model, this.getResource(), HISTORYNOTE, value);
	}
  
    /**
     * Removes all values of property HistoryNote     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllbiboHistoryNote( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, HISTORYNOTE);
	}
	
    /**
     * Removes all values of property HistoryNote	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllbiboHistoryNote() {
		Base.removeAll(this.model, this.getResource(), HISTORYNOTE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@71e9dd has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasbiboInverseOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, INVERSEOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@71e9dd has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasbiboInverseOf() {
		return Base.has(this.model, this.getResource(), INVERSEOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@71e9dd has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasbiboInverseOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, INVERSEOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@71e9dd has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasbiboInverseOf( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), INVERSEOF);
	}

     /**
     * Get all values of property InverseOf as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboInverseOf_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, INVERSEOF);
	}
	
    /**
     * Get all values of property InverseOf as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboInverseOf_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, INVERSEOF, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property InverseOf as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboInverseOf_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), INVERSEOF);
	}

    /**
     * Get all values of property InverseOf as a ReactorResult of RDF2Go nodes 
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboInverseOf_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), INVERSEOF, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property InverseOf     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllbiboInverseOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, INVERSEOF, Thing.class);
	}
	
    /**
     * Get all values of property InverseOf as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllbiboInverseOf_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, INVERSEOF, Thing.class);
	}

    /**
     * Get all values of property InverseOf     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllbiboInverseOf() {
		return Base.getAll(this.model, this.getResource(), INVERSEOF, Thing.class);
	}

    /**
     * Get all values of property InverseOf as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllbiboInverseOf_as() {
		return Base.getAll_as(this.model, this.getResource(), INVERSEOF, Thing.class);
	}
 
    /**
     * Adds a value to property InverseOf as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addbiboInverseOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, INVERSEOF, value);
	}
	
    /**
     * Adds a value to property InverseOf as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addbiboInverseOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), INVERSEOF, value);
	}
    /**
     * Adds a value to property InverseOf from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addbiboInverseOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, INVERSEOF, value);
	}
	
    /**
     * Adds a value to property InverseOf from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addbiboInverseOf(Thing value) {
		Base.add(this.model, this.getResource(), INVERSEOF, value);
	}
  

    /**
     * Sets a value of property InverseOf from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setbiboInverseOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, INVERSEOF, value);
	}
	
    /**
     * Sets a value of property InverseOf from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setbiboInverseOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), INVERSEOF, value);
	}
    /**
     * Sets a value of property InverseOf from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setbiboInverseOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, INVERSEOF, value);
	}
	
    /**
     * Sets a value of property InverseOf from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setbiboInverseOf(Thing value) {
		Base.set(this.model, this.getResource(), INVERSEOF, value);
	}
  


    /**
     * Removes a value of property InverseOf as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removebiboInverseOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, INVERSEOF, value);
	}
	
    /**
     * Removes a value of property InverseOf as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removebiboInverseOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), INVERSEOF, value);
	}
    /**
     * Removes a value of property InverseOf given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removebiboInverseOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, INVERSEOF, value);
	}
	
    /**
     * Removes a value of property InverseOf given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removebiboInverseOf(Thing value) {
		Base.remove(this.model, this.getResource(), INVERSEOF, value);
	}
  
    /**
     * Removes all values of property InverseOf     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllbiboInverseOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, INVERSEOF);
	}
	
    /**
     * Removes all values of property InverseOf	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllbiboInverseOf() {
		Base.removeAll(this.model, this.getResource(), INVERSEOF);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2c908d has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasbiboIsPartOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ISPARTOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2c908d has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasbiboIsPartOf() {
		return Base.has(this.model, this.getResource(), ISPARTOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2c908d has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasbiboIsPartOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ISPARTOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2c908d has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasbiboIsPartOf( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ISPARTOF);
	}

     /**
     * Get all values of property IsPartOf as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboIsPartOf_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ISPARTOF);
	}
	
    /**
     * Get all values of property IsPartOf as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboIsPartOf_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ISPARTOF, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property IsPartOf as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboIsPartOf_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ISPARTOF);
	}

    /**
     * Get all values of property IsPartOf as a ReactorResult of RDF2Go nodes 
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboIsPartOf_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ISPARTOF, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property IsPartOf     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllbiboIsPartOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ISPARTOF, Thing.class);
	}
	
    /**
     * Get all values of property IsPartOf as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllbiboIsPartOf_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ISPARTOF, Thing.class);
	}

    /**
     * Get all values of property IsPartOf     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllbiboIsPartOf() {
		return Base.getAll(this.model, this.getResource(), ISPARTOF, Thing.class);
	}

    /**
     * Get all values of property IsPartOf as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllbiboIsPartOf_as() {
		return Base.getAll_as(this.model, this.getResource(), ISPARTOF, Thing.class);
	}
 
    /**
     * Adds a value to property IsPartOf as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addbiboIsPartOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ISPARTOF, value);
	}
	
    /**
     * Adds a value to property IsPartOf as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addbiboIsPartOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ISPARTOF, value);
	}
    /**
     * Adds a value to property IsPartOf from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addbiboIsPartOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, ISPARTOF, value);
	}
	
    /**
     * Adds a value to property IsPartOf from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addbiboIsPartOf(Thing value) {
		Base.add(this.model, this.getResource(), ISPARTOF, value);
	}
  

    /**
     * Sets a value of property IsPartOf from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setbiboIsPartOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ISPARTOF, value);
	}
	
    /**
     * Sets a value of property IsPartOf from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setbiboIsPartOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ISPARTOF, value);
	}
    /**
     * Sets a value of property IsPartOf from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setbiboIsPartOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, ISPARTOF, value);
	}
	
    /**
     * Sets a value of property IsPartOf from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setbiboIsPartOf(Thing value) {
		Base.set(this.model, this.getResource(), ISPARTOF, value);
	}
  


    /**
     * Removes a value of property IsPartOf as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removebiboIsPartOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ISPARTOF, value);
	}
	
    /**
     * Removes a value of property IsPartOf as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removebiboIsPartOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ISPARTOF, value);
	}
    /**
     * Removes a value of property IsPartOf given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removebiboIsPartOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, ISPARTOF, value);
	}
	
    /**
     * Removes a value of property IsPartOf given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removebiboIsPartOf(Thing value) {
		Base.remove(this.model, this.getResource(), ISPARTOF, value);
	}
  
    /**
     * Removes all values of property IsPartOf     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllbiboIsPartOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ISPARTOF);
	}
	
    /**
     * Removes all values of property IsPartOf	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllbiboIsPartOf() {
		Base.removeAll(this.model, this.getResource(), ISPARTOF);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@50c8a4 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasbiboIsReferencedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ISREFERENCEDBY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@50c8a4 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasbiboIsReferencedBy() {
		return Base.has(this.model, this.getResource(), ISREFERENCEDBY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@50c8a4 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasbiboIsReferencedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ISREFERENCEDBY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@50c8a4 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasbiboIsReferencedBy( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ISREFERENCEDBY);
	}

     /**
     * Get all values of property IsReferencedBy as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboIsReferencedBy_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ISREFERENCEDBY);
	}
	
    /**
     * Get all values of property IsReferencedBy as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboIsReferencedBy_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ISREFERENCEDBY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property IsReferencedBy as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboIsReferencedBy_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ISREFERENCEDBY);
	}

    /**
     * Get all values of property IsReferencedBy as a ReactorResult of RDF2Go nodes 
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboIsReferencedBy_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ISREFERENCEDBY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property IsReferencedBy     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllbiboIsReferencedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ISREFERENCEDBY, Thing.class);
	}
	
    /**
     * Get all values of property IsReferencedBy as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllbiboIsReferencedBy_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ISREFERENCEDBY, Thing.class);
	}

    /**
     * Get all values of property IsReferencedBy     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllbiboIsReferencedBy() {
		return Base.getAll(this.model, this.getResource(), ISREFERENCEDBY, Thing.class);
	}

    /**
     * Get all values of property IsReferencedBy as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllbiboIsReferencedBy_as() {
		return Base.getAll_as(this.model, this.getResource(), ISREFERENCEDBY, Thing.class);
	}
 
    /**
     * Adds a value to property IsReferencedBy as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addbiboIsReferencedBy( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ISREFERENCEDBY, value);
	}
	
    /**
     * Adds a value to property IsReferencedBy as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addbiboIsReferencedBy( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ISREFERENCEDBY, value);
	}
    /**
     * Adds a value to property IsReferencedBy from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addbiboIsReferencedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, ISREFERENCEDBY, value);
	}
	
    /**
     * Adds a value to property IsReferencedBy from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addbiboIsReferencedBy(Thing value) {
		Base.add(this.model, this.getResource(), ISREFERENCEDBY, value);
	}
  

    /**
     * Sets a value of property IsReferencedBy from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setbiboIsReferencedBy( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ISREFERENCEDBY, value);
	}
	
    /**
     * Sets a value of property IsReferencedBy from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setbiboIsReferencedBy( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ISREFERENCEDBY, value);
	}
    /**
     * Sets a value of property IsReferencedBy from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setbiboIsReferencedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, ISREFERENCEDBY, value);
	}
	
    /**
     * Sets a value of property IsReferencedBy from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setbiboIsReferencedBy(Thing value) {
		Base.set(this.model, this.getResource(), ISREFERENCEDBY, value);
	}
  


    /**
     * Removes a value of property IsReferencedBy as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removebiboIsReferencedBy( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ISREFERENCEDBY, value);
	}
	
    /**
     * Removes a value of property IsReferencedBy as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removebiboIsReferencedBy( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ISREFERENCEDBY, value);
	}
    /**
     * Removes a value of property IsReferencedBy given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removebiboIsReferencedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, ISREFERENCEDBY, value);
	}
	
    /**
     * Removes a value of property IsReferencedBy given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removebiboIsReferencedBy(Thing value) {
		Base.remove(this.model, this.getResource(), ISREFERENCEDBY, value);
	}
  
    /**
     * Removes all values of property IsReferencedBy     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllbiboIsReferencedBy( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ISREFERENCEDBY);
	}
	
    /**
     * Removes all values of property IsReferencedBy	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllbiboIsReferencedBy() {
		Base.removeAll(this.model, this.getResource(), ISREFERENCEDBY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@841b24 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasbiboIsVersionOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ISVERSIONOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@841b24 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasbiboIsVersionOf() {
		return Base.has(this.model, this.getResource(), ISVERSIONOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@841b24 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasbiboIsVersionOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ISVERSIONOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@841b24 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasbiboIsVersionOf( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ISVERSIONOF);
	}

     /**
     * Get all values of property IsVersionOf as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboIsVersionOf_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ISVERSIONOF);
	}
	
    /**
     * Get all values of property IsVersionOf as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboIsVersionOf_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ISVERSIONOF, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property IsVersionOf as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboIsVersionOf_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ISVERSIONOF);
	}

    /**
     * Get all values of property IsVersionOf as a ReactorResult of RDF2Go nodes 
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboIsVersionOf_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ISVERSIONOF, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property IsVersionOf     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllbiboIsVersionOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ISVERSIONOF, Thing.class);
	}
	
    /**
     * Get all values of property IsVersionOf as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllbiboIsVersionOf_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ISVERSIONOF, Thing.class);
	}

    /**
     * Get all values of property IsVersionOf     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllbiboIsVersionOf() {
		return Base.getAll(this.model, this.getResource(), ISVERSIONOF, Thing.class);
	}

    /**
     * Get all values of property IsVersionOf as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllbiboIsVersionOf_as() {
		return Base.getAll_as(this.model, this.getResource(), ISVERSIONOF, Thing.class);
	}
 
    /**
     * Adds a value to property IsVersionOf as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addbiboIsVersionOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ISVERSIONOF, value);
	}
	
    /**
     * Adds a value to property IsVersionOf as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addbiboIsVersionOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ISVERSIONOF, value);
	}
    /**
     * Adds a value to property IsVersionOf from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addbiboIsVersionOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, ISVERSIONOF, value);
	}
	
    /**
     * Adds a value to property IsVersionOf from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addbiboIsVersionOf(Thing value) {
		Base.add(this.model, this.getResource(), ISVERSIONOF, value);
	}
  

    /**
     * Sets a value of property IsVersionOf from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setbiboIsVersionOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ISVERSIONOF, value);
	}
	
    /**
     * Sets a value of property IsVersionOf from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setbiboIsVersionOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ISVERSIONOF, value);
	}
    /**
     * Sets a value of property IsVersionOf from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setbiboIsVersionOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, ISVERSIONOF, value);
	}
	
    /**
     * Sets a value of property IsVersionOf from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setbiboIsVersionOf(Thing value) {
		Base.set(this.model, this.getResource(), ISVERSIONOF, value);
	}
  


    /**
     * Removes a value of property IsVersionOf as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removebiboIsVersionOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ISVERSIONOF, value);
	}
	
    /**
     * Removes a value of property IsVersionOf as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removebiboIsVersionOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ISVERSIONOF, value);
	}
    /**
     * Removes a value of property IsVersionOf given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removebiboIsVersionOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, ISVERSIONOF, value);
	}
	
    /**
     * Removes a value of property IsVersionOf given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removebiboIsVersionOf(Thing value) {
		Base.remove(this.model, this.getResource(), ISVERSIONOF, value);
	}
  
    /**
     * Removes all values of property IsVersionOf     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllbiboIsVersionOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ISVERSIONOF);
	}
	
    /**
     * Removes all values of property IsVersionOf	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllbiboIsVersionOf() {
		Base.removeAll(this.model, this.getResource(), ISVERSIONOF);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@9e56f2 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasbiboIsbn(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ISBN);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@9e56f2 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasbiboIsbn() {
		return Base.has(this.model, this.getResource(), ISBN);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@9e56f2 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasbiboIsbn(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ISBN);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@9e56f2 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasbiboIsbn( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ISBN);
	}

     /**
     * Get all values of property Isbn as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboIsbn_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ISBN);
	}
	
    /**
     * Get all values of property Isbn as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboIsbn_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ISBN, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Isbn as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboIsbn_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ISBN);
	}

    /**
     * Get all values of property Isbn as a ReactorResult of RDF2Go nodes 
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboIsbn_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ISBN, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Isbn     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllbiboIsbn(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ISBN, Thing.class);
	}
	
    /**
     * Get all values of property Isbn as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllbiboIsbn_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ISBN, Thing.class);
	}

    /**
     * Get all values of property Isbn     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllbiboIsbn() {
		return Base.getAll(this.model, this.getResource(), ISBN, Thing.class);
	}

    /**
     * Get all values of property Isbn as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllbiboIsbn_as() {
		return Base.getAll_as(this.model, this.getResource(), ISBN, Thing.class);
	}
 
    /**
     * Adds a value to property Isbn as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addbiboIsbn( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ISBN, value);
	}
	
    /**
     * Adds a value to property Isbn as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addbiboIsbn( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ISBN, value);
	}
    /**
     * Adds a value to property Isbn from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addbiboIsbn(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, ISBN, value);
	}
	
    /**
     * Adds a value to property Isbn from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addbiboIsbn(Thing value) {
		Base.add(this.model, this.getResource(), ISBN, value);
	}
  

    /**
     * Sets a value of property Isbn from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setbiboIsbn( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ISBN, value);
	}
	
    /**
     * Sets a value of property Isbn from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setbiboIsbn( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ISBN, value);
	}
    /**
     * Sets a value of property Isbn from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setbiboIsbn(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, ISBN, value);
	}
	
    /**
     * Sets a value of property Isbn from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setbiboIsbn(Thing value) {
		Base.set(this.model, this.getResource(), ISBN, value);
	}
  


    /**
     * Removes a value of property Isbn as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removebiboIsbn( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ISBN, value);
	}
	
    /**
     * Removes a value of property Isbn as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removebiboIsbn( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ISBN, value);
	}
    /**
     * Removes a value of property Isbn given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removebiboIsbn(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, ISBN, value);
	}
	
    /**
     * Removes a value of property Isbn given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removebiboIsbn(Thing value) {
		Base.remove(this.model, this.getResource(), ISBN, value);
	}
  
    /**
     * Removes all values of property Isbn     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllbiboIsbn( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ISBN);
	}
	
    /**
     * Removes all values of property Isbn	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllbiboIsbn() {
		Base.removeAll(this.model, this.getResource(), ISBN);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@9005af has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasbiboIssued(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ISSUED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@9005af has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasbiboIssued() {
		return Base.has(this.model, this.getResource(), ISSUED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@9005af has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasbiboIssued(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ISSUED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@9005af has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasbiboIssued( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ISSUED);
	}

     /**
     * Get all values of property Issued as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboIssued_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ISSUED);
	}
	
    /**
     * Get all values of property Issued as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboIssued_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ISSUED, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Issued as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboIssued_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ISSUED);
	}

    /**
     * Get all values of property Issued as a ReactorResult of RDF2Go nodes 
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboIssued_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ISSUED, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Issued     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllbiboIssued(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ISSUED, Thing.class);
	}
	
    /**
     * Get all values of property Issued as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllbiboIssued_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ISSUED, Thing.class);
	}

    /**
     * Get all values of property Issued     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllbiboIssued() {
		return Base.getAll(this.model, this.getResource(), ISSUED, Thing.class);
	}

    /**
     * Get all values of property Issued as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllbiboIssued_as() {
		return Base.getAll_as(this.model, this.getResource(), ISSUED, Thing.class);
	}
 
    /**
     * Adds a value to property Issued as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addbiboIssued( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ISSUED, value);
	}
	
    /**
     * Adds a value to property Issued as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addbiboIssued( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ISSUED, value);
	}
    /**
     * Adds a value to property Issued from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addbiboIssued(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, ISSUED, value);
	}
	
    /**
     * Adds a value to property Issued from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addbiboIssued(Thing value) {
		Base.add(this.model, this.getResource(), ISSUED, value);
	}
  

    /**
     * Sets a value of property Issued from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setbiboIssued( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ISSUED, value);
	}
	
    /**
     * Sets a value of property Issued from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setbiboIssued( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ISSUED, value);
	}
    /**
     * Sets a value of property Issued from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setbiboIssued(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, ISSUED, value);
	}
	
    /**
     * Sets a value of property Issued from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setbiboIssued(Thing value) {
		Base.set(this.model, this.getResource(), ISSUED, value);
	}
  


    /**
     * Removes a value of property Issued as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removebiboIssued( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ISSUED, value);
	}
	
    /**
     * Removes a value of property Issued as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removebiboIssued( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ISSUED, value);
	}
    /**
     * Removes a value of property Issued given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removebiboIssued(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, ISSUED, value);
	}
	
    /**
     * Removes a value of property Issued given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removebiboIssued(Thing value) {
		Base.remove(this.model, this.getResource(), ISSUED, value);
	}
  
    /**
     * Removes all values of property Issued     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllbiboIssued( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ISSUED);
	}
	
    /**
     * Removes all values of property Issued	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllbiboIssued() {
		Base.removeAll(this.model, this.getResource(), ISSUED);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@f485f has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasbiboMaxCardinality(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, MAXCARDINALITY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@f485f has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasbiboMaxCardinality() {
		return Base.has(this.model, this.getResource(), MAXCARDINALITY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@f485f has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasbiboMaxCardinality(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, MAXCARDINALITY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@f485f has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasbiboMaxCardinality( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), MAXCARDINALITY);
	}

     /**
     * Get all values of property MaxCardinality as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboMaxCardinality_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, MAXCARDINALITY);
	}
	
    /**
     * Get all values of property MaxCardinality as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboMaxCardinality_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, MAXCARDINALITY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property MaxCardinality as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboMaxCardinality_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), MAXCARDINALITY);
	}

    /**
     * Get all values of property MaxCardinality as a ReactorResult of RDF2Go nodes 
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboMaxCardinality_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), MAXCARDINALITY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property MaxCardinality     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllbiboMaxCardinality(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, MAXCARDINALITY, Thing.class);
	}
	
    /**
     * Get all values of property MaxCardinality as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllbiboMaxCardinality_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, MAXCARDINALITY, Thing.class);
	}

    /**
     * Get all values of property MaxCardinality     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllbiboMaxCardinality() {
		return Base.getAll(this.model, this.getResource(), MAXCARDINALITY, Thing.class);
	}

    /**
     * Get all values of property MaxCardinality as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllbiboMaxCardinality_as() {
		return Base.getAll_as(this.model, this.getResource(), MAXCARDINALITY, Thing.class);
	}
 
    /**
     * Adds a value to property MaxCardinality as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addbiboMaxCardinality( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, MAXCARDINALITY, value);
	}
	
    /**
     * Adds a value to property MaxCardinality as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addbiboMaxCardinality( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), MAXCARDINALITY, value);
	}
    /**
     * Adds a value to property MaxCardinality from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addbiboMaxCardinality(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, MAXCARDINALITY, value);
	}
	
    /**
     * Adds a value to property MaxCardinality from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addbiboMaxCardinality(Thing value) {
		Base.add(this.model, this.getResource(), MAXCARDINALITY, value);
	}
  

    /**
     * Sets a value of property MaxCardinality from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setbiboMaxCardinality( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, MAXCARDINALITY, value);
	}
	
    /**
     * Sets a value of property MaxCardinality from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setbiboMaxCardinality( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), MAXCARDINALITY, value);
	}
    /**
     * Sets a value of property MaxCardinality from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setbiboMaxCardinality(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, MAXCARDINALITY, value);
	}
	
    /**
     * Sets a value of property MaxCardinality from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setbiboMaxCardinality(Thing value) {
		Base.set(this.model, this.getResource(), MAXCARDINALITY, value);
	}
  


    /**
     * Removes a value of property MaxCardinality as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removebiboMaxCardinality( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, MAXCARDINALITY, value);
	}
	
    /**
     * Removes a value of property MaxCardinality as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removebiboMaxCardinality( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), MAXCARDINALITY, value);
	}
    /**
     * Removes a value of property MaxCardinality given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removebiboMaxCardinality(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, MAXCARDINALITY, value);
	}
	
    /**
     * Removes a value of property MaxCardinality given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removebiboMaxCardinality(Thing value) {
		Base.remove(this.model, this.getResource(), MAXCARDINALITY, value);
	}
  
    /**
     * Removes all values of property MaxCardinality     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllbiboMaxCardinality( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, MAXCARDINALITY);
	}
	
    /**
     * Removes all values of property MaxCardinality	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllbiboMaxCardinality() {
		Base.removeAll(this.model, this.getResource(), MAXCARDINALITY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@15400dd has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasbiboMinCardinality(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, MINCARDINALITY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@15400dd has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasbiboMinCardinality() {
		return Base.has(this.model, this.getResource(), MINCARDINALITY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@15400dd has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasbiboMinCardinality(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, MINCARDINALITY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@15400dd has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasbiboMinCardinality( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), MINCARDINALITY);
	}

     /**
     * Get all values of property MinCardinality as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboMinCardinality_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, MINCARDINALITY);
	}
	
    /**
     * Get all values of property MinCardinality as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboMinCardinality_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, MINCARDINALITY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property MinCardinality as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboMinCardinality_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), MINCARDINALITY);
	}

    /**
     * Get all values of property MinCardinality as a ReactorResult of RDF2Go nodes 
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboMinCardinality_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), MINCARDINALITY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property MinCardinality     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllbiboMinCardinality(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, MINCARDINALITY, Thing.class);
	}
	
    /**
     * Get all values of property MinCardinality as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllbiboMinCardinality_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, MINCARDINALITY, Thing.class);
	}

    /**
     * Get all values of property MinCardinality     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllbiboMinCardinality() {
		return Base.getAll(this.model, this.getResource(), MINCARDINALITY, Thing.class);
	}

    /**
     * Get all values of property MinCardinality as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllbiboMinCardinality_as() {
		return Base.getAll_as(this.model, this.getResource(), MINCARDINALITY, Thing.class);
	}
 
    /**
     * Adds a value to property MinCardinality as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addbiboMinCardinality( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, MINCARDINALITY, value);
	}
	
    /**
     * Adds a value to property MinCardinality as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addbiboMinCardinality( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), MINCARDINALITY, value);
	}
    /**
     * Adds a value to property MinCardinality from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addbiboMinCardinality(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, MINCARDINALITY, value);
	}
	
    /**
     * Adds a value to property MinCardinality from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addbiboMinCardinality(Thing value) {
		Base.add(this.model, this.getResource(), MINCARDINALITY, value);
	}
  

    /**
     * Sets a value of property MinCardinality from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setbiboMinCardinality( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, MINCARDINALITY, value);
	}
	
    /**
     * Sets a value of property MinCardinality from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setbiboMinCardinality( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), MINCARDINALITY, value);
	}
    /**
     * Sets a value of property MinCardinality from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setbiboMinCardinality(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, MINCARDINALITY, value);
	}
	
    /**
     * Sets a value of property MinCardinality from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setbiboMinCardinality(Thing value) {
		Base.set(this.model, this.getResource(), MINCARDINALITY, value);
	}
  


    /**
     * Removes a value of property MinCardinality as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removebiboMinCardinality( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, MINCARDINALITY, value);
	}
	
    /**
     * Removes a value of property MinCardinality as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removebiboMinCardinality( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), MINCARDINALITY, value);
	}
    /**
     * Removes a value of property MinCardinality given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removebiboMinCardinality(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, MINCARDINALITY, value);
	}
	
    /**
     * Removes a value of property MinCardinality given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removebiboMinCardinality(Thing value) {
		Base.remove(this.model, this.getResource(), MINCARDINALITY, value);
	}
  
    /**
     * Removes all values of property MinCardinality     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllbiboMinCardinality( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, MINCARDINALITY);
	}
	
    /**
     * Removes all values of property MinCardinality	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllbiboMinCardinality() {
		Base.removeAll(this.model, this.getResource(), MINCARDINALITY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1e4b17d has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasbiboName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, NAME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1e4b17d has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasbiboName() {
		return Base.has(this.model, this.getResource(), NAME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1e4b17d has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasbiboName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, NAME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1e4b17d has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasbiboName( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), NAME);
	}

     /**
     * Get all values of property Name as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboName_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, NAME);
	}
	
    /**
     * Get all values of property Name as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboName_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NAME, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Name as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboName_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), NAME);
	}

    /**
     * Get all values of property Name as a ReactorResult of RDF2Go nodes 
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboName_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), NAME, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Name     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllbiboName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, NAME, Thing.class);
	}
	
    /**
     * Get all values of property Name as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllbiboName_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NAME, Thing.class);
	}

    /**
     * Get all values of property Name     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllbiboName() {
		return Base.getAll(this.model, this.getResource(), NAME, Thing.class);
	}

    /**
     * Get all values of property Name as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllbiboName_as() {
		return Base.getAll_as(this.model, this.getResource(), NAME, Thing.class);
	}
 
    /**
     * Adds a value to property Name as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addbiboName( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, NAME, value);
	}
	
    /**
     * Adds a value to property Name as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addbiboName( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), NAME, value);
	}
    /**
     * Adds a value to property Name from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addbiboName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, NAME, value);
	}
	
    /**
     * Adds a value to property Name from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addbiboName(Thing value) {
		Base.add(this.model, this.getResource(), NAME, value);
	}
  

    /**
     * Sets a value of property Name from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setbiboName( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, NAME, value);
	}
	
    /**
     * Sets a value of property Name from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setbiboName( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), NAME, value);
	}
    /**
     * Sets a value of property Name from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setbiboName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, NAME, value);
	}
	
    /**
     * Sets a value of property Name from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setbiboName(Thing value) {
		Base.set(this.model, this.getResource(), NAME, value);
	}
  


    /**
     * Removes a value of property Name as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removebiboName( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, NAME, value);
	}
	
    /**
     * Removes a value of property Name as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removebiboName( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), NAME, value);
	}
    /**
     * Removes a value of property Name given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removebiboName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, NAME, value);
	}
	
    /**
     * Removes a value of property Name given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removebiboName(Thing value) {
		Base.remove(this.model, this.getResource(), NAME, value);
	}
  
    /**
     * Removes all values of property Name     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllbiboName( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, NAME);
	}
	
    /**
     * Removes all values of property Name	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllbiboName() {
		Base.removeAll(this.model, this.getResource(), NAME);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1f70939 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasbiboOnProperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ONPROPERTY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1f70939 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasbiboOnProperty() {
		return Base.has(this.model, this.getResource(), ONPROPERTY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1f70939 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasbiboOnProperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ONPROPERTY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1f70939 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasbiboOnProperty( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ONPROPERTY);
	}

     /**
     * Get all values of property OnProperty as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboOnProperty_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ONPROPERTY);
	}
	
    /**
     * Get all values of property OnProperty as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboOnProperty_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ONPROPERTY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property OnProperty as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboOnProperty_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ONPROPERTY);
	}

    /**
     * Get all values of property OnProperty as a ReactorResult of RDF2Go nodes 
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboOnProperty_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ONPROPERTY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property OnProperty     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllbiboOnProperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ONPROPERTY, Thing.class);
	}
	
    /**
     * Get all values of property OnProperty as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllbiboOnProperty_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ONPROPERTY, Thing.class);
	}

    /**
     * Get all values of property OnProperty     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllbiboOnProperty() {
		return Base.getAll(this.model, this.getResource(), ONPROPERTY, Thing.class);
	}

    /**
     * Get all values of property OnProperty as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllbiboOnProperty_as() {
		return Base.getAll_as(this.model, this.getResource(), ONPROPERTY, Thing.class);
	}
 
    /**
     * Adds a value to property OnProperty as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addbiboOnProperty( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ONPROPERTY, value);
	}
	
    /**
     * Adds a value to property OnProperty as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addbiboOnProperty( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ONPROPERTY, value);
	}
    /**
     * Adds a value to property OnProperty from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addbiboOnProperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, ONPROPERTY, value);
	}
	
    /**
     * Adds a value to property OnProperty from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addbiboOnProperty(Thing value) {
		Base.add(this.model, this.getResource(), ONPROPERTY, value);
	}
  

    /**
     * Sets a value of property OnProperty from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setbiboOnProperty( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ONPROPERTY, value);
	}
	
    /**
     * Sets a value of property OnProperty from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setbiboOnProperty( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ONPROPERTY, value);
	}
    /**
     * Sets a value of property OnProperty from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setbiboOnProperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, ONPROPERTY, value);
	}
	
    /**
     * Sets a value of property OnProperty from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setbiboOnProperty(Thing value) {
		Base.set(this.model, this.getResource(), ONPROPERTY, value);
	}
  


    /**
     * Removes a value of property OnProperty as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removebiboOnProperty( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ONPROPERTY, value);
	}
	
    /**
     * Removes a value of property OnProperty as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removebiboOnProperty( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ONPROPERTY, value);
	}
    /**
     * Removes a value of property OnProperty given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removebiboOnProperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, ONPROPERTY, value);
	}
	
    /**
     * Removes a value of property OnProperty given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removebiboOnProperty(Thing value) {
		Base.remove(this.model, this.getResource(), ONPROPERTY, value);
	}
  
    /**
     * Removes all values of property OnProperty     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllbiboOnProperty( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ONPROPERTY);
	}
	
    /**
     * Removes all values of property OnProperty	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllbiboOnProperty() {
		Base.removeAll(this.model, this.getResource(), ONPROPERTY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1b2a338 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasbiboProducedin(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PRODUCEDIN);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1b2a338 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasbiboProducedin() {
		return Base.has(this.model, this.getResource(), PRODUCEDIN);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1b2a338 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasbiboProducedin(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PRODUCEDIN);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1b2a338 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasbiboProducedin( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PRODUCEDIN);
	}

     /**
     * Get all values of property Producedin as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboProducedin_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PRODUCEDIN);
	}
	
    /**
     * Get all values of property Producedin as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboProducedin_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PRODUCEDIN, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Producedin as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboProducedin_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PRODUCEDIN);
	}

    /**
     * Get all values of property Producedin as a ReactorResult of RDF2Go nodes 
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboProducedin_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PRODUCEDIN, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Producedin     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllbiboProducedin(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PRODUCEDIN, Thing.class);
	}
	
    /**
     * Get all values of property Producedin as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllbiboProducedin_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PRODUCEDIN, Thing.class);
	}

    /**
     * Get all values of property Producedin     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllbiboProducedin() {
		return Base.getAll(this.model, this.getResource(), PRODUCEDIN, Thing.class);
	}

    /**
     * Get all values of property Producedin as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllbiboProducedin_as() {
		return Base.getAll_as(this.model, this.getResource(), PRODUCEDIN, Thing.class);
	}
 
    /**
     * Adds a value to property Producedin as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addbiboProducedin( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PRODUCEDIN, value);
	}
	
    /**
     * Adds a value to property Producedin as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addbiboProducedin( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PRODUCEDIN, value);
	}
    /**
     * Adds a value to property Producedin from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addbiboProducedin(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, PRODUCEDIN, value);
	}
	
    /**
     * Adds a value to property Producedin from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addbiboProducedin(Thing value) {
		Base.add(this.model, this.getResource(), PRODUCEDIN, value);
	}
  

    /**
     * Sets a value of property Producedin from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setbiboProducedin( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PRODUCEDIN, value);
	}
	
    /**
     * Sets a value of property Producedin from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setbiboProducedin( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PRODUCEDIN, value);
	}
    /**
     * Sets a value of property Producedin from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setbiboProducedin(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, PRODUCEDIN, value);
	}
	
    /**
     * Sets a value of property Producedin from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setbiboProducedin(Thing value) {
		Base.set(this.model, this.getResource(), PRODUCEDIN, value);
	}
  


    /**
     * Removes a value of property Producedin as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removebiboProducedin( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PRODUCEDIN, value);
	}
	
    /**
     * Removes a value of property Producedin as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removebiboProducedin( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PRODUCEDIN, value);
	}
    /**
     * Removes a value of property Producedin given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removebiboProducedin(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, PRODUCEDIN, value);
	}
	
    /**
     * Removes a value of property Producedin given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removebiboProducedin(Thing value) {
		Base.remove(this.model, this.getResource(), PRODUCEDIN, value);
	}
  
    /**
     * Removes all values of property Producedin     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllbiboProducedin( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PRODUCEDIN);
	}
	
    /**
     * Removes all values of property Producedin	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllbiboProducedin() {
		Base.removeAll(this.model, this.getResource(), PRODUCEDIN);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1902693 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasbiboProduct(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PRODUCT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1902693 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasbiboProduct() {
		return Base.has(this.model, this.getResource(), PRODUCT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1902693 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasbiboProduct(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PRODUCT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1902693 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasbiboProduct( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PRODUCT);
	}

     /**
     * Get all values of property Product as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboProduct_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PRODUCT);
	}
	
    /**
     * Get all values of property Product as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboProduct_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PRODUCT, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Product as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboProduct_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PRODUCT);
	}

    /**
     * Get all values of property Product as a ReactorResult of RDF2Go nodes 
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboProduct_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PRODUCT, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Product     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllbiboProduct(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PRODUCT, Thing.class);
	}
	
    /**
     * Get all values of property Product as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllbiboProduct_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PRODUCT, Thing.class);
	}

    /**
     * Get all values of property Product     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllbiboProduct() {
		return Base.getAll(this.model, this.getResource(), PRODUCT, Thing.class);
	}

    /**
     * Get all values of property Product as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllbiboProduct_as() {
		return Base.getAll_as(this.model, this.getResource(), PRODUCT, Thing.class);
	}
 
    /**
     * Adds a value to property Product as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addbiboProduct( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PRODUCT, value);
	}
	
    /**
     * Adds a value to property Product as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addbiboProduct( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PRODUCT, value);
	}
    /**
     * Adds a value to property Product from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addbiboProduct(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, PRODUCT, value);
	}
	
    /**
     * Adds a value to property Product from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addbiboProduct(Thing value) {
		Base.add(this.model, this.getResource(), PRODUCT, value);
	}
  

    /**
     * Sets a value of property Product from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setbiboProduct( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PRODUCT, value);
	}
	
    /**
     * Sets a value of property Product from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setbiboProduct( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PRODUCT, value);
	}
    /**
     * Sets a value of property Product from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setbiboProduct(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, PRODUCT, value);
	}
	
    /**
     * Sets a value of property Product from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setbiboProduct(Thing value) {
		Base.set(this.model, this.getResource(), PRODUCT, value);
	}
  


    /**
     * Removes a value of property Product as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removebiboProduct( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PRODUCT, value);
	}
	
    /**
     * Removes a value of property Product as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removebiboProduct( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PRODUCT, value);
	}
    /**
     * Removes a value of property Product given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removebiboProduct(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, PRODUCT, value);
	}
	
    /**
     * Removes a value of property Product given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removebiboProduct(Thing value) {
		Base.remove(this.model, this.getResource(), PRODUCT, value);
	}
  
    /**
     * Removes all values of property Product     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllbiboProduct( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PRODUCT);
	}
	
    /**
     * Removes all values of property Product	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllbiboProduct() {
		Base.removeAll(this.model, this.getResource(), PRODUCT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1b4799c has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasbiboPublisher(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PUBLISHER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1b4799c has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasbiboPublisher() {
		return Base.has(this.model, this.getResource(), PUBLISHER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1b4799c has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasbiboPublisher(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PUBLISHER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1b4799c has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasbiboPublisher( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PUBLISHER);
	}

     /**
     * Get all values of property Publisher as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboPublisher_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PUBLISHER);
	}
	
    /**
     * Get all values of property Publisher as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboPublisher_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PUBLISHER, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Publisher as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboPublisher_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PUBLISHER);
	}

    /**
     * Get all values of property Publisher as a ReactorResult of RDF2Go nodes 
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboPublisher_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PUBLISHER, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Publisher     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllbiboPublisher(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PUBLISHER, Thing.class);
	}
	
    /**
     * Get all values of property Publisher as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllbiboPublisher_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PUBLISHER, Thing.class);
	}

    /**
     * Get all values of property Publisher     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllbiboPublisher() {
		return Base.getAll(this.model, this.getResource(), PUBLISHER, Thing.class);
	}

    /**
     * Get all values of property Publisher as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllbiboPublisher_as() {
		return Base.getAll_as(this.model, this.getResource(), PUBLISHER, Thing.class);
	}
 
    /**
     * Adds a value to property Publisher as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addbiboPublisher( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PUBLISHER, value);
	}
	
    /**
     * Adds a value to property Publisher as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addbiboPublisher( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PUBLISHER, value);
	}
    /**
     * Adds a value to property Publisher from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addbiboPublisher(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, PUBLISHER, value);
	}
	
    /**
     * Adds a value to property Publisher from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addbiboPublisher(Thing value) {
		Base.add(this.model, this.getResource(), PUBLISHER, value);
	}
  

    /**
     * Sets a value of property Publisher from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setbiboPublisher( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PUBLISHER, value);
	}
	
    /**
     * Sets a value of property Publisher from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setbiboPublisher( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PUBLISHER, value);
	}
    /**
     * Sets a value of property Publisher from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setbiboPublisher(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, PUBLISHER, value);
	}
	
    /**
     * Sets a value of property Publisher from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setbiboPublisher(Thing value) {
		Base.set(this.model, this.getResource(), PUBLISHER, value);
	}
  


    /**
     * Removes a value of property Publisher as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removebiboPublisher( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PUBLISHER, value);
	}
	
    /**
     * Removes a value of property Publisher as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removebiboPublisher( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PUBLISHER, value);
	}
    /**
     * Removes a value of property Publisher given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removebiboPublisher(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, PUBLISHER, value);
	}
	
    /**
     * Removes a value of property Publisher given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removebiboPublisher(Thing value) {
		Base.remove(this.model, this.getResource(), PUBLISHER, value);
	}
  
    /**
     * Removes all values of property Publisher     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllbiboPublisher( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PUBLISHER);
	}
	
    /**
     * Removes all values of property Publisher	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllbiboPublisher() {
		Base.removeAll(this.model, this.getResource(), PUBLISHER);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1669588 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasbiboRelation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, RELATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1669588 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasbiboRelation() {
		return Base.has(this.model, this.getResource(), RELATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1669588 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasbiboRelation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, RELATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1669588 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasbiboRelation( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), RELATION);
	}

     /**
     * Get all values of property Relation as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboRelation_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, RELATION);
	}
	
    /**
     * Get all values of property Relation as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboRelation_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, RELATION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Relation as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboRelation_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), RELATION);
	}

    /**
     * Get all values of property Relation as a ReactorResult of RDF2Go nodes 
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboRelation_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), RELATION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Relation     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllbiboRelation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, RELATION, Thing.class);
	}
	
    /**
     * Get all values of property Relation as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllbiboRelation_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, RELATION, Thing.class);
	}

    /**
     * Get all values of property Relation     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllbiboRelation() {
		return Base.getAll(this.model, this.getResource(), RELATION, Thing.class);
	}

    /**
     * Get all values of property Relation as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllbiboRelation_as() {
		return Base.getAll_as(this.model, this.getResource(), RELATION, Thing.class);
	}
 
    /**
     * Adds a value to property Relation as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addbiboRelation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, RELATION, value);
	}
	
    /**
     * Adds a value to property Relation as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addbiboRelation( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), RELATION, value);
	}
    /**
     * Adds a value to property Relation from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addbiboRelation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, RELATION, value);
	}
	
    /**
     * Adds a value to property Relation from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addbiboRelation(Thing value) {
		Base.add(this.model, this.getResource(), RELATION, value);
	}
  

    /**
     * Sets a value of property Relation from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setbiboRelation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, RELATION, value);
	}
	
    /**
     * Sets a value of property Relation from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setbiboRelation( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), RELATION, value);
	}
    /**
     * Sets a value of property Relation from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setbiboRelation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, RELATION, value);
	}
	
    /**
     * Sets a value of property Relation from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setbiboRelation(Thing value) {
		Base.set(this.model, this.getResource(), RELATION, value);
	}
  


    /**
     * Removes a value of property Relation as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removebiboRelation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, RELATION, value);
	}
	
    /**
     * Removes a value of property Relation as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removebiboRelation( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), RELATION, value);
	}
    /**
     * Removes a value of property Relation given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removebiboRelation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, RELATION, value);
	}
	
    /**
     * Removes a value of property Relation given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removebiboRelation(Thing value) {
		Base.remove(this.model, this.getResource(), RELATION, value);
	}
  
    /**
     * Removes all values of property Relation     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllbiboRelation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, RELATION);
	}
	
    /**
     * Removes all values of property Relation	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllbiboRelation() {
		Base.removeAll(this.model, this.getResource(), RELATION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@97be8c has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasbiboScopeNote(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SCOPENOTE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@97be8c has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasbiboScopeNote() {
		return Base.has(this.model, this.getResource(), SCOPENOTE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@97be8c has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasbiboScopeNote(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SCOPENOTE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@97be8c has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasbiboScopeNote( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SCOPENOTE);
	}

     /**
     * Get all values of property ScopeNote as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboScopeNote_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SCOPENOTE);
	}
	
    /**
     * Get all values of property ScopeNote as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboScopeNote_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SCOPENOTE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ScopeNote as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboScopeNote_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SCOPENOTE);
	}

    /**
     * Get all values of property ScopeNote as a ReactorResult of RDF2Go nodes 
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboScopeNote_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SCOPENOTE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ScopeNote     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllbiboScopeNote(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SCOPENOTE, Thing.class);
	}
	
    /**
     * Get all values of property ScopeNote as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllbiboScopeNote_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SCOPENOTE, Thing.class);
	}

    /**
     * Get all values of property ScopeNote     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllbiboScopeNote() {
		return Base.getAll(this.model, this.getResource(), SCOPENOTE, Thing.class);
	}

    /**
     * Get all values of property ScopeNote as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllbiboScopeNote_as() {
		return Base.getAll_as(this.model, this.getResource(), SCOPENOTE, Thing.class);
	}
 
    /**
     * Adds a value to property ScopeNote as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addbiboScopeNote( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SCOPENOTE, value);
	}
	
    /**
     * Adds a value to property ScopeNote as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addbiboScopeNote( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SCOPENOTE, value);
	}
    /**
     * Adds a value to property ScopeNote from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addbiboScopeNote(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, SCOPENOTE, value);
	}
	
    /**
     * Adds a value to property ScopeNote from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addbiboScopeNote(Thing value) {
		Base.add(this.model, this.getResource(), SCOPENOTE, value);
	}
  

    /**
     * Sets a value of property ScopeNote from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setbiboScopeNote( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SCOPENOTE, value);
	}
	
    /**
     * Sets a value of property ScopeNote from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setbiboScopeNote( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SCOPENOTE, value);
	}
    /**
     * Sets a value of property ScopeNote from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setbiboScopeNote(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, SCOPENOTE, value);
	}
	
    /**
     * Sets a value of property ScopeNote from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setbiboScopeNote(Thing value) {
		Base.set(this.model, this.getResource(), SCOPENOTE, value);
	}
  


    /**
     * Removes a value of property ScopeNote as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removebiboScopeNote( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SCOPENOTE, value);
	}
	
    /**
     * Removes a value of property ScopeNote as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removebiboScopeNote( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SCOPENOTE, value);
	}
    /**
     * Removes a value of property ScopeNote given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removebiboScopeNote(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, SCOPENOTE, value);
	}
	
    /**
     * Removes a value of property ScopeNote given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removebiboScopeNote(Thing value) {
		Base.remove(this.model, this.getResource(), SCOPENOTE, value);
	}
  
    /**
     * Removes all values of property ScopeNote     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllbiboScopeNote( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SCOPENOTE);
	}
	
    /**
     * Removes all values of property ScopeNote	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllbiboScopeNote() {
		Base.removeAll(this.model, this.getResource(), SCOPENOTE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@172bc25 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasbiboTermstatus(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, TERMSTATUS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@172bc25 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasbiboTermstatus() {
		return Base.has(this.model, this.getResource(), TERMSTATUS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@172bc25 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasbiboTermstatus(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, TERMSTATUS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@172bc25 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasbiboTermstatus( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), TERMSTATUS);
	}

     /**
     * Get all values of property Termstatus as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboTermstatus_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, TERMSTATUS);
	}
	
    /**
     * Get all values of property Termstatus as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboTermstatus_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TERMSTATUS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Termstatus as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboTermstatus_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), TERMSTATUS);
	}

    /**
     * Get all values of property Termstatus as a ReactorResult of RDF2Go nodes 
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboTermstatus_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), TERMSTATUS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Termstatus     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllbiboTermstatus(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, TERMSTATUS, Thing.class);
	}
	
    /**
     * Get all values of property Termstatus as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllbiboTermstatus_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TERMSTATUS, Thing.class);
	}

    /**
     * Get all values of property Termstatus     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllbiboTermstatus() {
		return Base.getAll(this.model, this.getResource(), TERMSTATUS, Thing.class);
	}

    /**
     * Get all values of property Termstatus as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllbiboTermstatus_as() {
		return Base.getAll_as(this.model, this.getResource(), TERMSTATUS, Thing.class);
	}
 
    /**
     * Adds a value to property Termstatus as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addbiboTermstatus( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, TERMSTATUS, value);
	}
	
    /**
     * Adds a value to property Termstatus as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addbiboTermstatus( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), TERMSTATUS, value);
	}
    /**
     * Adds a value to property Termstatus from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addbiboTermstatus(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, TERMSTATUS, value);
	}
	
    /**
     * Adds a value to property Termstatus from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addbiboTermstatus(Thing value) {
		Base.add(this.model, this.getResource(), TERMSTATUS, value);
	}
  

    /**
     * Sets a value of property Termstatus from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setbiboTermstatus( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, TERMSTATUS, value);
	}
	
    /**
     * Sets a value of property Termstatus from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setbiboTermstatus( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), TERMSTATUS, value);
	}
    /**
     * Sets a value of property Termstatus from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setbiboTermstatus(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, TERMSTATUS, value);
	}
	
    /**
     * Sets a value of property Termstatus from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setbiboTermstatus(Thing value) {
		Base.set(this.model, this.getResource(), TERMSTATUS, value);
	}
  


    /**
     * Removes a value of property Termstatus as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removebiboTermstatus( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, TERMSTATUS, value);
	}
	
    /**
     * Removes a value of property Termstatus as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removebiboTermstatus( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), TERMSTATUS, value);
	}
    /**
     * Removes a value of property Termstatus given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removebiboTermstatus(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, TERMSTATUS, value);
	}
	
    /**
     * Removes a value of property Termstatus given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removebiboTermstatus(Thing value) {
		Base.remove(this.model, this.getResource(), TERMSTATUS, value);
	}
  
    /**
     * Removes all values of property Termstatus     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllbiboTermstatus( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, TERMSTATUS);
	}
	
    /**
     * Removes all values of property Termstatus	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllbiboTermstatus() {
		Base.removeAll(this.model, this.getResource(), TERMSTATUS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7fe315 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasbiboTitle(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, TITLE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7fe315 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasbiboTitle() {
		return Base.has(this.model, this.getResource(), TITLE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7fe315 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasbiboTitle(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, TITLE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7fe315 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasbiboTitle( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), TITLE);
	}

     /**
     * Get all values of property Title as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboTitle_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, TITLE);
	}
	
    /**
     * Get all values of property Title as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboTitle_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TITLE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Title as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboTitle_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), TITLE);
	}

    /**
     * Get all values of property Title as a ReactorResult of RDF2Go nodes 
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboTitle_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), TITLE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Title     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllbiboTitle(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, TITLE, Thing.class);
	}
	
    /**
     * Get all values of property Title as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllbiboTitle_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TITLE, Thing.class);
	}

    /**
     * Get all values of property Title     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllbiboTitle() {
		return Base.getAll(this.model, this.getResource(), TITLE, Thing.class);
	}

    /**
     * Get all values of property Title as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllbiboTitle_as() {
		return Base.getAll_as(this.model, this.getResource(), TITLE, Thing.class);
	}
 
    /**
     * Adds a value to property Title as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addbiboTitle( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, TITLE, value);
	}
	
    /**
     * Adds a value to property Title as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addbiboTitle( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), TITLE, value);
	}
    /**
     * Adds a value to property Title from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addbiboTitle(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, TITLE, value);
	}
	
    /**
     * Adds a value to property Title from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addbiboTitle(Thing value) {
		Base.add(this.model, this.getResource(), TITLE, value);
	}
  

    /**
     * Sets a value of property Title from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setbiboTitle( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, TITLE, value);
	}
	
    /**
     * Sets a value of property Title from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setbiboTitle( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), TITLE, value);
	}
    /**
     * Sets a value of property Title from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setbiboTitle(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, TITLE, value);
	}
	
    /**
     * Sets a value of property Title from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setbiboTitle(Thing value) {
		Base.set(this.model, this.getResource(), TITLE, value);
	}
  


    /**
     * Removes a value of property Title as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removebiboTitle( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, TITLE, value);
	}
	
    /**
     * Removes a value of property Title as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removebiboTitle( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), TITLE, value);
	}
    /**
     * Removes a value of property Title given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removebiboTitle(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, TITLE, value);
	}
	
    /**
     * Removes a value of property Title given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removebiboTitle(Thing value) {
		Base.remove(this.model, this.getResource(), TITLE, value);
	}
  
    /**
     * Removes all values of property Title     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllbiboTitle( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, TITLE);
	}
	
    /**
     * Removes all values of property Title	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllbiboTitle() {
		Base.removeAll(this.model, this.getResource(), TITLE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5a11cf has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasbiboUnionOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, UNIONOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5a11cf has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasbiboUnionOf() {
		return Base.has(this.model, this.getResource(), UNIONOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5a11cf has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasbiboUnionOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, UNIONOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5a11cf has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasbiboUnionOf( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), UNIONOF);
	}

     /**
     * Get all values of property UnionOf as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboUnionOf_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, UNIONOF);
	}
	
    /**
     * Get all values of property UnionOf as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboUnionOf_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, UNIONOF, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property UnionOf as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboUnionOf_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), UNIONOF);
	}

    /**
     * Get all values of property UnionOf as a ReactorResult of RDF2Go nodes 
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboUnionOf_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), UNIONOF, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property UnionOf     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllbiboUnionOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, UNIONOF, Thing.class);
	}
	
    /**
     * Get all values of property UnionOf as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllbiboUnionOf_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, UNIONOF, Thing.class);
	}

    /**
     * Get all values of property UnionOf     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllbiboUnionOf() {
		return Base.getAll(this.model, this.getResource(), UNIONOF, Thing.class);
	}

    /**
     * Get all values of property UnionOf as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllbiboUnionOf_as() {
		return Base.getAll_as(this.model, this.getResource(), UNIONOF, Thing.class);
	}
 
    /**
     * Adds a value to property UnionOf as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addbiboUnionOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, UNIONOF, value);
	}
	
    /**
     * Adds a value to property UnionOf as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addbiboUnionOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), UNIONOF, value);
	}
    /**
     * Adds a value to property UnionOf from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addbiboUnionOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, UNIONOF, value);
	}
	
    /**
     * Adds a value to property UnionOf from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addbiboUnionOf(Thing value) {
		Base.add(this.model, this.getResource(), UNIONOF, value);
	}
  

    /**
     * Sets a value of property UnionOf from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setbiboUnionOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, UNIONOF, value);
	}
	
    /**
     * Sets a value of property UnionOf from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setbiboUnionOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), UNIONOF, value);
	}
    /**
     * Sets a value of property UnionOf from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setbiboUnionOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, UNIONOF, value);
	}
	
    /**
     * Sets a value of property UnionOf from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setbiboUnionOf(Thing value) {
		Base.set(this.model, this.getResource(), UNIONOF, value);
	}
  


    /**
     * Removes a value of property UnionOf as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removebiboUnionOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, UNIONOF, value);
	}
	
    /**
     * Removes a value of property UnionOf as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removebiboUnionOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), UNIONOF, value);
	}
    /**
     * Removes a value of property UnionOf given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removebiboUnionOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, UNIONOF, value);
	}
	
    /**
     * Removes a value of property UnionOf given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removebiboUnionOf(Thing value) {
		Base.remove(this.model, this.getResource(), UNIONOF, value);
	}
  
    /**
     * Removes all values of property UnionOf     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllbiboUnionOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, UNIONOF);
	}
	
    /**
     * Removes all values of property UnionOf	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllbiboUnionOf() {
		Base.removeAll(this.model, this.getResource(), UNIONOF);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@13e3590 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasbiboVersionInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, VERSIONINFO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@13e3590 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasbiboVersionInfo() {
		return Base.has(this.model, this.getResource(), VERSIONINFO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@13e3590 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasbiboVersionInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, VERSIONINFO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@13e3590 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasbiboVersionInfo( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), VERSIONINFO);
	}

     /**
     * Get all values of property VersionInfo as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboVersionInfo_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, VERSIONINFO);
	}
	
    /**
     * Get all values of property VersionInfo as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboVersionInfo_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, VERSIONINFO, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property VersionInfo as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboVersionInfo_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), VERSIONINFO);
	}

    /**
     * Get all values of property VersionInfo as a ReactorResult of RDF2Go nodes 
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboVersionInfo_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), VERSIONINFO, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property VersionInfo     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllbiboVersionInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, VERSIONINFO, Thing.class);
	}
	
    /**
     * Get all values of property VersionInfo as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllbiboVersionInfo_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, VERSIONINFO, Thing.class);
	}

    /**
     * Get all values of property VersionInfo     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllbiboVersionInfo() {
		return Base.getAll(this.model, this.getResource(), VERSIONINFO, Thing.class);
	}

    /**
     * Get all values of property VersionInfo as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllbiboVersionInfo_as() {
		return Base.getAll_as(this.model, this.getResource(), VERSIONINFO, Thing.class);
	}
 
    /**
     * Adds a value to property VersionInfo as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addbiboVersionInfo( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, VERSIONINFO, value);
	}
	
    /**
     * Adds a value to property VersionInfo as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addbiboVersionInfo( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), VERSIONINFO, value);
	}
    /**
     * Adds a value to property VersionInfo from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addbiboVersionInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, VERSIONINFO, value);
	}
	
    /**
     * Adds a value to property VersionInfo from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addbiboVersionInfo(Thing value) {
		Base.add(this.model, this.getResource(), VERSIONINFO, value);
	}
  

    /**
     * Sets a value of property VersionInfo from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setbiboVersionInfo( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, VERSIONINFO, value);
	}
	
    /**
     * Sets a value of property VersionInfo from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setbiboVersionInfo( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), VERSIONINFO, value);
	}
    /**
     * Sets a value of property VersionInfo from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setbiboVersionInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, VERSIONINFO, value);
	}
	
    /**
     * Sets a value of property VersionInfo from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setbiboVersionInfo(Thing value) {
		Base.set(this.model, this.getResource(), VERSIONINFO, value);
	}
  


    /**
     * Removes a value of property VersionInfo as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removebiboVersionInfo( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, VERSIONINFO, value);
	}
	
    /**
     * Removes a value of property VersionInfo as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removebiboVersionInfo( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), VERSIONINFO, value);
	}
    /**
     * Removes a value of property VersionInfo given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removebiboVersionInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, VERSIONINFO, value);
	}
	
    /**
     * Removes a value of property VersionInfo given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removebiboVersionInfo(Thing value) {
		Base.remove(this.model, this.getResource(), VERSIONINFO, value);
	}
  
    /**
     * Removes all values of property VersionInfo     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllbiboVersionInfo( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, VERSIONINFO);
	}
	
    /**
     * Removes all values of property VersionInfo	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllbiboVersionInfo() {
		Base.removeAll(this.model, this.getResource(), VERSIONINFO);
	}
 }