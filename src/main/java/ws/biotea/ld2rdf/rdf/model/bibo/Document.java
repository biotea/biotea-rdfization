/**
 * pubmed.endNote.jaxb.generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 1535 2008-09-09 15:44:46Z max.at.xam.de $) on 13/01/11 08:05 PM
 */
package ws.biotea.ld2rdf.rdf.model.bibo;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.Statement;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.Node;
import org.ontoware.rdf2go.model.node.PlainLiteral;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.PlainLiteralImpl;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;


/**
 * This class manages access to these properties:
 * <ul>
 *   <li> BiboStatus </li>
 *   <li> Citedby </li>
 *   <li> Cites </li>
 *   <li> Content </li>
 *   <li> Edition </li>
 *   <li> Listofauthors </li>
 *   <li> Listofcontributors </li>
 *   <li> Listofeditors </li>
 *   <li> Locator </li>
 *   <li> Number </li>
 *   <li> Numberofpages </li>
 *   <li> Pageend </li>
 *   <li> Pages </li>
 *   <li> Pagestart </li>
 *   <li> Presentedat </li>
 *   <li> ReproducedIn </li>
 *   <li> Reviewof </li>
 *   <li> SectionE </li>
 *   <li> ShortDescription </li>
 *   <li> Shorttitle </li>
 *   <li> Transcriptof </li>
 *   <li> Translationof </li>
 *   <li> Volume </li>
 *   <li> Issue </li>
 * </ul>
 *
 * This class was pubmed.endNote.jaxb.generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 13/01/11 08:05 PM
 */
public class Document extends Thing {

    /** http://purl.org/ontology/bibo/Document */
    @SuppressWarnings("hiding")
	public static final URI RDFS_CLASS = new URIImpl("http://purl.org/ontology/bibo/Document", false);

    /** http://purl.org/ontology/bibo/status */
    @SuppressWarnings("hiding")
	public static final URI BIBOSTATUS = new URIImpl("http://purl.org/ontology/bibo/status",false);

    /** http://purl.org/ontology/bibo/citedBy */
    @SuppressWarnings("hiding")
	public static final URI CITEDBY = new URIImpl("http://purl.org/ontology/bibo/citedBy",false);

    /** http://purl.org/ontology/bibo/cites */
    @SuppressWarnings("hiding")
	public static final URI CITES = new URIImpl("http://purl.org/ontology/bibo/cites",false);

    /** http://purl.org/ontology/bibo/content */
    @SuppressWarnings("hiding")
	public static final URI CONTENT = new URIImpl("http://purl.org/ontology/bibo/content",false);

    /** http://purl.org/ontology/bibo/edition */
    @SuppressWarnings("hiding")
	public static final URI EDITION = new URIImpl("http://purl.org/ontology/bibo/edition",false);

    /** http://purl.org/ontology/bibo/authorList */
    @SuppressWarnings("hiding")
	public static final URI LISTOFAUTHORS = new URIImpl("http://purl.org/ontology/bibo/authorList",false);

    /** http://purl.org/ontology/bibo/contributorList */
    @SuppressWarnings("hiding")
	public static final URI LISTOFCONTRIBUTORS = new URIImpl("http://purl.org/ontology/bibo/contributorList",false);

    /** http://purl.org/ontology/bibo/editorList */
    @SuppressWarnings("hiding")
	public static final URI LISTOFEDITORS = new URIImpl("http://purl.org/ontology/bibo/editorList",false);

    /** http://purl.org/ontology/bibo/locator */
    @SuppressWarnings("hiding")
	public static final URI LOCATOR = new URIImpl("http://purl.org/ontology/bibo/locator",false);

    /** http://purl.org/ontology/bibo/number */
    @SuppressWarnings("hiding")
	public static final URI NUMBER = new URIImpl("http://purl.org/ontology/bibo/number",false);

    /** http://purl.org/ontology/bibo/numPages */
    @SuppressWarnings("hiding")
	public static final URI NUMBEROFPAGES = new URIImpl("http://purl.org/ontology/bibo/numPages",false);

    /** http://purl.org/ontology/bibo/pageEnd */
    @SuppressWarnings("hiding")
	public static final URI PAGEEND = new URIImpl("http://purl.org/ontology/bibo/pageEnd",false);

    /** http://purl.org/ontology/bibo/pages */
    @SuppressWarnings("hiding")
	public static final URI PAGES = new URIImpl("http://purl.org/ontology/bibo/pages",false);

    /** http://purl.org/ontology/bibo/pageStart */
    @SuppressWarnings("hiding")
	public static final URI PAGESTART = new URIImpl("http://purl.org/ontology/bibo/pageStart",false);

    /** http://purl.org/ontology/bibo/presentedAt */
    @SuppressWarnings("hiding")
	public static final URI PRESENTEDAT = new URIImpl("http://purl.org/ontology/bibo/presentedAt",false);

    /** http://purl.org/ontology/bibo/reproducedIn */
    @SuppressWarnings("hiding")
	public static final URI REPRODUCEDIN = new URIImpl("http://purl.org/ontology/bibo/reproducedIn",false);

    /** http://purl.org/ontology/bibo/reviewOf */
    @SuppressWarnings("hiding")
	public static final URI REVIEWOF = new URIImpl("http://purl.org/ontology/bibo/reviewOf",false);

    /** http://purl.org/ontology/bibo/section */
    @SuppressWarnings("hiding")
	public static final URI SECTION = new URIImpl("http://purl.org/ontology/bibo/section",false);

    /** http://purl.org/ontology/bibo/shortDescription */
    @SuppressWarnings("hiding")
	public static final URI SHORTDESCRIPTION = new URIImpl("http://purl.org/ontology/bibo/shortDescription",false);

    /** http://purl.org/ontology/bibo/shortTitle */
    @SuppressWarnings("hiding")
	public static final URI SHORTTITLE = new URIImpl("http://purl.org/ontology/bibo/shortTitle",false);

    /** http://purl.org/ontology/bibo/transcriptOf */
    @SuppressWarnings("hiding")
	public static final URI TRANSCRIPTOF = new URIImpl("http://purl.org/ontology/bibo/transcriptOf",false);

    /** http://purl.org/ontology/bibo/translationOf */
    @SuppressWarnings("hiding")
	public static final URI TRANSLATIONOF = new URIImpl("http://purl.org/ontology/bibo/translationOf",false);

    /** http://purl.org/ontology/bibo/volume */
    @SuppressWarnings("hiding")
	public static final URI VOLUME = new URIImpl("http://purl.org/ontology/bibo/volume",false);
    
    /** http://purl.org/ontology/bibo/issue */
    @SuppressWarnings("hiding")
	public static final URI ISSUE = new URIImpl("http://purl.org/ontology/bibo/issue",false);    

    /** 
     * All property-URIs with this class as domain.
     * All properties of all super-classes are also available. 
     */
    @SuppressWarnings("hiding")
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://purl.org/ontology/bibo/status",false),
      new URIImpl("http://purl.org/ontology/bibo/citedBy",false),
      new URIImpl("http://purl.org/ontology/bibo/cites",false),
      new URIImpl("http://purl.org/ontology/bibo/content",false),
      new URIImpl("http://purl.org/ontology/bibo/edition",false),
      new URIImpl("http://purl.org/ontology/bibo/authorList",false),
      new URIImpl("http://purl.org/ontology/bibo/contributorList",false),
      new URIImpl("http://purl.org/ontology/bibo/editorList",false),
      new URIImpl("http://purl.org/ontology/bibo/locator",false),
      new URIImpl("http://purl.org/ontology/bibo/number",false),
      new URIImpl("http://purl.org/ontology/bibo/numPages",false),
      new URIImpl("http://purl.org/ontology/bibo/pageEnd",false),
      new URIImpl("http://purl.org/ontology/bibo/pages",false),
      new URIImpl("http://purl.org/ontology/bibo/pageStart",false),
      new URIImpl("http://purl.org/ontology/bibo/presentedAt",false),
      new URIImpl("http://purl.org/ontology/bibo/reproducedIn",false),
      new URIImpl("http://purl.org/ontology/bibo/reviewOf",false),
      new URIImpl("http://purl.org/ontology/bibo/section",false),
      new URIImpl("http://purl.org/ontology/bibo/shortDescription",false),
      new URIImpl("http://purl.org/ontology/bibo/shortTitle",false),
      new URIImpl("http://purl.org/ontology/bibo/transcriptOf",false),
      new URIImpl("http://purl.org/ontology/bibo/translationOf",false),
      new URIImpl("http://purl.org/ontology/bibo/volume",false),
      new URIImpl("http://purl.org/ontology/bibo/issue",false)
    };


	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c1] 
	 */
	protected Document ( Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, classURI, instanceIdentifier, write);
		/*if (!(this instanceof CollectedDocument)) {
		    model.addStatement(this.asResource(), Thing.RDF_TYPE, Document.RDFS_CLASS); //rdf:type Document
		}*/		
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c2] 
	 */
	public Document ( Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}


	/**
	 * Returns a Java wrapper over an RDF object, identified by a URI, given as a String.
	 * Creating two wrappers for the same URI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString a URI given as a String
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 * @throws ModelRuntimeException if URI syntax is wrong
	 *
	 * [Generated from RDFReactor template rule #c7] 
	 */
	public Document ( Model model, String uriString, boolean write) throws ModelRuntimeException {
		super(model, RDFS_CLASS, new URIImpl(uriString,false), write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c8] 
	 */
	public Document ( Model model, BlankNode bnode, boolean write ) {
		super(model, RDFS_CLASS, bnode, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly pubmed.endNote.jaxb.generated URI.
	 * Creating two wrappers results in different URIs.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c9] 
	 */
	public Document ( Model model, boolean write ) {
		super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
	}

    ///////////////////////////////////////////////////////////////////
    // typing

	/**
	 * Return an existing instance of this class in the model. No statements are written.
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return an instance of Document  or null if none existst
	 *
	 * [Generated from RDFReactor template rule #class0] 
	 */
	public static Document  getInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getInstance(model, instanceResource, Document.class);
	}

	/**
	 * Create a new instance of this class in the model. 
	 * That is, create the statement (instanceResource, RDF.type, http://purl.org/ontology/bibo/Document).
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class1] 
	 */
	public static void createInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.createInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return true if instanceResource is an instance of this class in the model
	 *
	 * [Generated from RDFReactor template rule #class2] 
	 */
	public static boolean hasInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.hasInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as RDF resources
	 *
	 * [Generated from RDFReactor template rule #class3] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstances(Model model) {
		return Base.getAllInstances(model, RDFS_CLASS, org.ontoware.rdf2go.model.node.Resource.class);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as a ReactorResult,
	 * which can conveniently be converted to iterator, list or array.
	 *
	 * [Generated from RDFReactor template rule #class3-as] 
	 */
	public static ReactorResult<? extends Document> getAllInstances_as(Model model) {
		return Base.getAllInstances_as(model, RDFS_CLASS, Document.class );
	}

    /**
	 * Remove rdf:type Document from this instance. Other triples are not affected.
	 * To delete more, use deleteAllProperties
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class4] 
	 */
	public static void deleteInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * Delete all (this, *, *), i.e. including rdf:type
	 * @param model an RDF2Go model
	 * @param resource
	 */
	public static void deleteAllProperties(Model model,	org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteAllProperties(model, instanceResource);
	}

    ///////////////////////////////////////////////////////////////////
    // property access methods

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Citedby' to this Document instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllbiboCitedby_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Document.CITEDBY, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Citedby' to this Document instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllbiboCitedby_Inverse() {
		return Base.getAll_Inverse(this.model, Document.CITEDBY, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Citedby' to this Document instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllbiboCitedby_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Document.CITEDBY, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Cites' to this Document instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllbiboCites_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Document.CITES, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Cites' to this Document instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllbiboCites_Inverse() {
		return Base.getAll_Inverse(this.model, Document.CITES, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Cites' to this Document instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllbiboCites_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Document.CITES, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ReproducedIn' to this Document instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllbiboReproducedIn_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Document.REPRODUCEDIN, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ReproducedIn' to this Document instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllbiboReproducedIn_Inverse() {
		return Base.getAll_Inverse(this.model, Document.REPRODUCEDIN, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ReproducedIn' to this Document instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllbiboReproducedIn_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Document.REPRODUCEDIN, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Translationof' to this Document instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllbiboTranslationof_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Document.TRANSLATIONOF, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Translationof' to this Document instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllbiboTranslationof_Inverse() {
		return Base.getAll_Inverse(this.model, Document.TRANSLATIONOF, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Translationof' to this Document instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllbiboTranslationof_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Document.TRANSLATIONOF, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Presentedat' to this Document instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllbiboPresentedat_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, BiboEvent.PRESENTEDAT, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Presentedat' to this Document instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllbiboPresentedat_Inverse() {
		return Base.getAll_Inverse(this.model, BiboEvent.PRESENTEDAT, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Presentedat' to this Document instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllbiboPresentedat_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, BiboEvent.PRESENTEDAT, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}



    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1ffb4b1 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasbiboBiboStatus(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, BIBOSTATUS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1ffb4b1 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasbiboBiboStatus() {
		return Base.has(this.model, this.getResource(), BIBOSTATUS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1ffb4b1 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasbiboBiboStatus(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, BIBOSTATUS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1ffb4b1 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasbiboBiboStatus( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), BIBOSTATUS);
	}

     /**
     * Get all values of property BiboStatus as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboBiboStatus_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, BIBOSTATUS);
	}
	
    /**
     * Get all values of property BiboStatus as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboBiboStatus_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, BIBOSTATUS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property BiboStatus as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboBiboStatus_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), BIBOSTATUS);
	}

    /**
     * Get all values of property BiboStatus as a ReactorResult of RDF2Go nodes 
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboBiboStatus_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), BIBOSTATUS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property BiboStatus     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<DocumentStatus> getAllbiboBiboStatus(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, BIBOSTATUS, DocumentStatus.class);
	}
	
    /**
     * Get all values of property BiboStatus as a ReactorResult of DocumentStatus 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<DocumentStatus> getAllbiboBiboStatus_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, BIBOSTATUS, DocumentStatus.class);
	}

    /**
     * Get all values of property BiboStatus     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<DocumentStatus> getAllbiboBiboStatus() {
		return Base.getAll(this.model, this.getResource(), BIBOSTATUS, DocumentStatus.class);
	}

    /**
     * Get all values of property BiboStatus as a ReactorResult of DocumentStatus 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<DocumentStatus> getAllbiboBiboStatus_as() {
		return Base.getAll_as(this.model, this.getResource(), BIBOSTATUS, DocumentStatus.class);
	}
 
    /**
     * Adds a value to property BiboStatus as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addbiboBiboStatus( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, BIBOSTATUS, value);
	}
	
    /**
     * Adds a value to property BiboStatus as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addbiboBiboStatus( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), BIBOSTATUS, value);
	}
    /**
     * Adds a value to property BiboStatus from an instance of DocumentStatus 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addbiboBiboStatus(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, DocumentStatus value) {
		Base.add(model, instanceResource, BIBOSTATUS, value);
	}
	
    /**
     * Adds a value to property BiboStatus from an instance of DocumentStatus 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addbiboBiboStatus(DocumentStatus value) {
		Base.add(this.model, this.getResource(), BIBOSTATUS, value);
	}
  

    /**
     * Sets a value of property BiboStatus from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setbiboBiboStatus( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, BIBOSTATUS, value);
	}
	
    /**
     * Sets a value of property BiboStatus from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setbiboBiboStatus( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), BIBOSTATUS, value);
	}
    /**
     * Sets a value of property BiboStatus from an instance of DocumentStatus 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setbiboBiboStatus(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, DocumentStatus value) {
		Base.set(model, instanceResource, BIBOSTATUS, value);
	}
	
    /**
     * Sets a value of property BiboStatus from an instance of DocumentStatus 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setbiboBiboStatus(DocumentStatus value) {
		Base.set(this.model, this.getResource(), BIBOSTATUS, value);
	}
  


    /**
     * Removes a value of property BiboStatus as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removebiboBiboStatus( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, BIBOSTATUS, value);
	}
	
    /**
     * Removes a value of property BiboStatus as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removebiboBiboStatus( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), BIBOSTATUS, value);
	}
    /**
     * Removes a value of property BiboStatus given as an instance of DocumentStatus 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removebiboBiboStatus(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, DocumentStatus value) {
		Base.remove(model, instanceResource, BIBOSTATUS, value);
	}
	
    /**
     * Removes a value of property BiboStatus given as an instance of DocumentStatus 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removebiboBiboStatus(DocumentStatus value) {
		Base.remove(this.model, this.getResource(), BIBOSTATUS, value);
	}
  
    /**
     * Removes all values of property BiboStatus     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllbiboBiboStatus( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, BIBOSTATUS);
	}
	
    /**
     * Removes all values of property BiboStatus	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllbiboBiboStatus() {
		Base.removeAll(this.model, this.getResource(), BIBOSTATUS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@17ddf26 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasbiboCitedby(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, CITEDBY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@17ddf26 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasbiboCitedby() {
		return Base.has(this.model, this.getResource(), CITEDBY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@17ddf26 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasbiboCitedby(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, CITEDBY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@17ddf26 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasbiboCitedby( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), CITEDBY);
	}

     /**
     * Get all values of property Citedby as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboCitedby_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, CITEDBY);
	}
	
    /**
     * Get all values of property Citedby as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboCitedby_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CITEDBY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Citedby as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboCitedby_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), CITEDBY);
	}

    /**
     * Get all values of property Citedby as a ReactorResult of RDF2Go nodes 
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboCitedby_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), CITEDBY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Citedby     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Document> getAllbiboCitedby(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, CITEDBY, Document.class);
	}
	
    /**
     * Get all values of property Citedby as a ReactorResult of Document 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Document> getAllbiboCitedby_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CITEDBY, Document.class);
	}

    /**
     * Get all values of property Citedby     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Document> getAllbiboCitedby() {
		return Base.getAll(this.model, this.getResource(), CITEDBY, Document.class);
	}

    /**
     * Get all values of property Citedby as a ReactorResult of Document 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Document> getAllbiboCitedby_as() {
		return Base.getAll_as(this.model, this.getResource(), CITEDBY, Document.class);
	}
 
    /**
     * Adds a value to property Citedby as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addbiboCitedby( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, CITEDBY, value);
	}
	
    /**
     * Adds a value to property Citedby as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addbiboCitedby( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), CITEDBY, value);
	}
    /**
     * Adds a value to property Citedby from an instance of Document 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addbiboCitedby(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Document value) {
		Base.add(model, instanceResource, CITEDBY, value);
	}
	
    /**
     * Adds a value to property Citedby from an instance of Document 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addbiboCitedby(Document value) {
		Base.add(this.model, this.getResource(), CITEDBY, value);
	}
  

    /**
     * Sets a value of property Citedby from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setbiboCitedby( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, CITEDBY, value);
	}
	
    /**
     * Sets a value of property Citedby from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setbiboCitedby( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), CITEDBY, value);
	}
    /**
     * Sets a value of property Citedby from an instance of Document 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setbiboCitedby(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Document value) {
		Base.set(model, instanceResource, CITEDBY, value);
	}
	
    /**
     * Sets a value of property Citedby from an instance of Document 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setbiboCitedby(Document value) {
		Base.set(this.model, this.getResource(), CITEDBY, value);
	}
  


    /**
     * Removes a value of property Citedby as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removebiboCitedby( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, CITEDBY, value);
	}
	
    /**
     * Removes a value of property Citedby as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removebiboCitedby( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), CITEDBY, value);
	}
    /**
     * Removes a value of property Citedby given as an instance of Document 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removebiboCitedby(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Document value) {
		Base.remove(model, instanceResource, CITEDBY, value);
	}
	
    /**
     * Removes a value of property Citedby given as an instance of Document 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removebiboCitedby(Document value) {
		Base.remove(this.model, this.getResource(), CITEDBY, value);
	}
  
    /**
     * Removes all values of property Citedby     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllbiboCitedby( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, CITEDBY);
	}
	
    /**
     * Removes all values of property Citedby	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllbiboCitedby() {
		Base.removeAll(this.model, this.getResource(), CITEDBY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1887a9d has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasbiboCites(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, CITES);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1887a9d has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasbiboCites() {
		return Base.has(this.model, this.getResource(), CITES);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1887a9d has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasbiboCites(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, CITES);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1887a9d has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasbiboCites( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), CITES);
	}

     /**
     * Get all values of property Cites as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboCites_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, CITES);
	}
	
    /**
     * Get all values of property Cites as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboCites_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CITES, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Cites as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboCites_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), CITES);
	}

    /**
     * Get all values of property Cites as a ReactorResult of RDF2Go nodes 
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboCites_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), CITES, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Cites     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Document> getAllbiboCites(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, CITES, Document.class);
	}
	
    /**
     * Get all values of property Cites as a ReactorResult of Document 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Document> getAllbiboCites_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CITES, Document.class);
	}

    /**
     * Get all values of property Cites     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Document> getAllbiboCites() {
		return Base.getAll(this.model, this.getResource(), CITES, Document.class);
	}

    /**
     * Get all values of property Cites as a ReactorResult of Document 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Document> getAllbiboCites_as() {
		return Base.getAll_as(this.model, this.getResource(), CITES, Document.class);
	}
 
    /**
     * Adds a value to property Cites as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addbiboCites( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, CITES, value);
	}
	
    /**
     * Adds a value to property Cites as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addbiboCites( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), CITES, value);
	}
    /**
     * Adds a value to property Cites from an instance of Document 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addbiboCites(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Document value) {
		Base.add(model, instanceResource, CITES, value);
	}
	
    /**
     * Adds a value to property Cites from an instance of Document 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addbiboCites(Document value) {
		Base.add(this.model, this.getResource(), CITES, value);
	}
  

    /**
     * Sets a value of property Cites from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setbiboCites( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, CITES, value);
	}
	
    /**
     * Sets a value of property Cites from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setbiboCites( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), CITES, value);
	}
    /**
     * Sets a value of property Cites from an instance of Document 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setbiboCites(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Document value) {
		Base.set(model, instanceResource, CITES, value);
	}
	
    /**
     * Sets a value of property Cites from an instance of Document 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setbiboCites(Document value) {
		Base.set(this.model, this.getResource(), CITES, value);
	}
  


    /**
     * Removes a value of property Cites as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removebiboCites( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, CITES, value);
	}
	
    /**
     * Removes a value of property Cites as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removebiboCites( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), CITES, value);
	}
    /**
     * Removes a value of property Cites given as an instance of Document 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removebiboCites(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Document value) {
		Base.remove(model, instanceResource, CITES, value);
	}
	
    /**
     * Removes a value of property Cites given as an instance of Document 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removebiboCites(Document value) {
		Base.remove(this.model, this.getResource(), CITES, value);
	}
  
    /**
     * Removes all values of property Cites     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllbiboCites( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, CITES);
	}
	
    /**
     * Removes all values of property Cites	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllbiboCites() {
		Base.removeAll(this.model, this.getResource(), CITES);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@18aefc1 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasbiboContent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, CONTENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@18aefc1 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasbiboContent() {
		return Base.has(this.model, this.getResource(), CONTENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@18aefc1 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasbiboContent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, CONTENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@18aefc1 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasbiboContent( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), CONTENT);
	}

     /**
     * Get all values of property Content as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboContent_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, CONTENT);
	}
	
    /**
     * Get all values of property Content as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboContent_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CONTENT, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Content as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboContent_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), CONTENT);
	}

    /**
     * Get all values of property Content as a ReactorResult of RDF2Go nodes 
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboContent_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), CONTENT, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Content     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllbiboContent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, CONTENT, java.lang.String.class);
	}
	
    /**
     * Get all values of property Content as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllbiboContent_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CONTENT, java.lang.String.class);
	}

    /**
     * Get all values of property Content     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllbiboContent() {
		return Base.getAll(this.model, this.getResource(), CONTENT, java.lang.String.class);
	}

    /**
     * Get all values of property Content as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllbiboContent_as() {
		return Base.getAll_as(this.model, this.getResource(), CONTENT, java.lang.String.class);
	}
 
    /**
     * Adds a value to property Content as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addbiboContent( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, CONTENT, value);
	}
	
    /**
     * Adds a value to property Content as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addbiboContent( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), CONTENT, value);
	}
    /**
     * Adds a value to property Content from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addbiboContent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, CONTENT, value);
	}
	
    /**
     * Adds a value to property Content from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addbiboContent(java.lang.String value) {
		Base.add(this.model, this.getResource(), CONTENT, value);
	}
  

    /**
     * Sets a value of property Content from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setbiboContent( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, CONTENT, value);
	}
	
    /**
     * Sets a value of property Content from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setbiboContent( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), CONTENT, value);
	}
    /**
     * Sets a value of property Content from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setbiboContent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, CONTENT, value);
	}
	
    /**
     * Sets a value of property Content from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setbiboContent(java.lang.String value) {
		Base.set(this.model, this.getResource(), CONTENT, value);
	}
  


    /**
     * Removes a value of property Content as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removebiboContent( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, CONTENT, value);
	}
	
    /**
     * Removes a value of property Content as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removebiboContent( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), CONTENT, value);
	}
    /**
     * Removes a value of property Content given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removebiboContent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, CONTENT, value);
	}
	
    /**
     * Removes a value of property Content given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removebiboContent(java.lang.String value) {
		Base.remove(this.model, this.getResource(), CONTENT, value);
	}
  
    /**
     * Removes all values of property Content     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllbiboContent( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, CONTENT);
	}
	
    /**
     * Removes all values of property Content	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllbiboContent() {
		Base.removeAll(this.model, this.getResource(), CONTENT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c19f92 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasbiboEdition(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EDITION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c19f92 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasbiboEdition() {
		return Base.has(this.model, this.getResource(), EDITION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c19f92 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasbiboEdition(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EDITION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c19f92 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasbiboEdition( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EDITION);
	}

     /**
     * Get all values of property Edition as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboEdition_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EDITION);
	}
	
    /**
     * Get all values of property Edition as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboEdition_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EDITION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Edition as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboEdition_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EDITION);
	}

    /**
     * Get all values of property Edition as a ReactorResult of RDF2Go nodes 
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboEdition_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EDITION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Edition     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllbiboEdition(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EDITION, java.lang.String.class);
	}
	
    /**
     * Get all values of property Edition as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllbiboEdition_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EDITION, java.lang.String.class);
	}

    /**
     * Get all values of property Edition     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllbiboEdition() {
		return Base.getAll(this.model, this.getResource(), EDITION, java.lang.String.class);
	}

    /**
     * Get all values of property Edition as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllbiboEdition_as() {
		return Base.getAll_as(this.model, this.getResource(), EDITION, java.lang.String.class);
	}
 
    /**
     * Adds a value to property Edition as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addbiboEdition( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EDITION, value);
	}
	
    /**
     * Adds a value to property Edition as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addbiboEdition( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EDITION, value);
	}
    /**
     * Adds a value to property Edition from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addbiboEdition(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, EDITION, value);
	}
	
    /**
     * Adds a value to property Edition from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addbiboEdition(java.lang.String value) {
		Base.add(this.model, this.getResource(), EDITION, value);
	}
  

    /**
     * Sets a value of property Edition from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setbiboEdition( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EDITION, value);
	}
	
    /**
     * Sets a value of property Edition from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setbiboEdition( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EDITION, value);
	}
    /**
     * Sets a value of property Edition from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setbiboEdition(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, EDITION, value);
	}
	
    /**
     * Sets a value of property Edition from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setbiboEdition(java.lang.String value) {
		Base.set(this.model, this.getResource(), EDITION, value);
	}
  


    /**
     * Removes a value of property Edition as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removebiboEdition( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EDITION, value);
	}
	
    /**
     * Removes a value of property Edition as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removebiboEdition( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EDITION, value);
	}
    /**
     * Removes a value of property Edition given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removebiboEdition(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, EDITION, value);
	}
	
    /**
     * Removes a value of property Edition given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removebiboEdition(java.lang.String value) {
		Base.remove(this.model, this.getResource(), EDITION, value);
	}
  
    /**
     * Removes all values of property Edition     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllbiboEdition( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EDITION);
	}
	
    /**
     * Removes all values of property Edition	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllbiboEdition() {
		Base.removeAll(this.model, this.getResource(), EDITION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1515f59 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasbiboListofauthors(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, LISTOFAUTHORS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1515f59 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasbiboListofauthors() {
		return Base.has(this.model, this.getResource(), LISTOFAUTHORS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1515f59 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasbiboListofauthors(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, LISTOFAUTHORS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1515f59 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasbiboListofauthors( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), LISTOFAUTHORS);
	}

     /**
     * Get all values of property Listofauthors as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboListofauthors_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, LISTOFAUTHORS);
	}
	
    /**
     * Get all values of property Listofauthors as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboListofauthors_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LISTOFAUTHORS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Listofauthors as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboListofauthors_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), LISTOFAUTHORS);
	}

    /**
     * Get all values of property Listofauthors as a ReactorResult of RDF2Go nodes 
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboListofauthors_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), LISTOFAUTHORS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Listofauthors     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<A_0> getAllbiboListofauthors(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, LISTOFAUTHORS, A_0.class);
	}
	
    /**
     * Get all values of property Listofauthors as a ReactorResult of A_0 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<A_0> getAllbiboListofauthors_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LISTOFAUTHORS, A_0.class);
	}

    /**
     * Get all values of property Listofauthors     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<A_0> getAllbiboListofauthors() {
		return Base.getAll(this.model, this.getResource(), LISTOFAUTHORS, A_0.class);
	}

    /**
     * Get all values of property Listofauthors as a ReactorResult of A_0 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<A_0> getAllbiboListofauthors_as() {
		return Base.getAll_as(this.model, this.getResource(), LISTOFAUTHORS, A_0.class);
	}
 
    /**
     * Adds a value to property Listofauthors as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addbiboListofauthors( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, LISTOFAUTHORS, value);
	}
	
    /**
     * Adds a value to property Listofauthors as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addbiboListofauthors( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), LISTOFAUTHORS, value);
	}
    /**
     * Adds a value to property Listofauthors from an instance of A_0 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addbiboListofauthors(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, A_0 value) {
		Base.add(model, instanceResource, LISTOFAUTHORS, value);
	}
	
    /**
     * Adds a value to property Listofauthors from an instance of A_0 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addbiboListofauthors(A_0 value) {
		Base.add(this.model, this.getResource(), LISTOFAUTHORS, value);
	}
  

    /**
     * Sets a value of property Listofauthors from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setbiboListofauthors( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, LISTOFAUTHORS, value);
	}
	
    /**
     * Sets a value of property Listofauthors from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setbiboListofauthors( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), LISTOFAUTHORS, value);
	}
    /**
     * Sets a value of property Listofauthors from an instance of A_0 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setbiboListofauthors(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, A_0 value) {
		Base.set(model, instanceResource, LISTOFAUTHORS, value);
	}
	
    /**
     * Sets a value of property Listofauthors from an instance of A_0 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setbiboListofauthors(A_0 value) {
		Base.set(this.model, this.getResource(), LISTOFAUTHORS, value);
	}
  


    /**
     * Removes a value of property Listofauthors as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removebiboListofauthors( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, LISTOFAUTHORS, value);
	}
	
    /**
     * Removes a value of property Listofauthors as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removebiboListofauthors( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), LISTOFAUTHORS, value);
	}
    /**
     * Removes a value of property Listofauthors given as an instance of A_0 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removebiboListofauthors(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, A_0 value) {
		Base.remove(model, instanceResource, LISTOFAUTHORS, value);
	}
	
    /**
     * Removes a value of property Listofauthors given as an instance of A_0 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removebiboListofauthors(A_0 value) {
		Base.remove(this.model, this.getResource(), LISTOFAUTHORS, value);
	}
  
    /**
     * Removes all values of property Listofauthors     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllbiboListofauthors( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, LISTOFAUTHORS);
	}
	
    /**
     * Removes all values of property Listofauthors	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllbiboListofauthors() {
		Base.removeAll(this.model, this.getResource(), LISTOFAUTHORS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@641e3 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasbiboListofcontributors(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, LISTOFCONTRIBUTORS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@641e3 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasbiboListofcontributors() {
		return Base.has(this.model, this.getResource(), LISTOFCONTRIBUTORS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@641e3 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasbiboListofcontributors(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, LISTOFCONTRIBUTORS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@641e3 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasbiboListofcontributors( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), LISTOFCONTRIBUTORS);
	}

     /**
     * Get all values of property Listofcontributors as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboListofcontributors_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, LISTOFCONTRIBUTORS);
	}
	
    /**
     * Get all values of property Listofcontributors as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboListofcontributors_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LISTOFCONTRIBUTORS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Listofcontributors as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboListofcontributors_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), LISTOFCONTRIBUTORS);
	}

    /**
     * Get all values of property Listofcontributors as a ReactorResult of RDF2Go nodes 
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboListofcontributors_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), LISTOFCONTRIBUTORS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Listofcontributors     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<A_0> getAllbiboListofcontributors(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, LISTOFCONTRIBUTORS, A_0.class);
	}
	
    /**
     * Get all values of property Listofcontributors as a ReactorResult of A_0 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<A_0> getAllbiboListofcontributors_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LISTOFCONTRIBUTORS, A_0.class);
	}

    /**
     * Get all values of property Listofcontributors     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<A_0> getAllbiboListofcontributors() {
		return Base.getAll(this.model, this.getResource(), LISTOFCONTRIBUTORS, A_0.class);
	}

    /**
     * Get all values of property Listofcontributors as a ReactorResult of A_0 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<A_0> getAllbiboListofcontributors_as() {
		return Base.getAll_as(this.model, this.getResource(), LISTOFCONTRIBUTORS, A_0.class);
	}
 
    /**
     * Adds a value to property Listofcontributors as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addbiboListofcontributors( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, LISTOFCONTRIBUTORS, value);
	}
	
    /**
     * Adds a value to property Listofcontributors as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addbiboListofcontributors( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), LISTOFCONTRIBUTORS, value);
	}
    /**
     * Adds a value to property Listofcontributors from an instance of A_0 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addbiboListofcontributors(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, A_0 value) {
		Base.add(model, instanceResource, LISTOFCONTRIBUTORS, value);
	}
	
    /**
     * Adds a value to property Listofcontributors from an instance of A_0 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addbiboListofcontributors(A_0 value) {
		Base.add(this.model, this.getResource(), LISTOFCONTRIBUTORS, value);
	}
  

    /**
     * Sets a value of property Listofcontributors from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setbiboListofcontributors( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, LISTOFCONTRIBUTORS, value);
	}
	
    /**
     * Sets a value of property Listofcontributors from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setbiboListofcontributors( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), LISTOFCONTRIBUTORS, value);
	}
    /**
     * Sets a value of property Listofcontributors from an instance of A_0 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setbiboListofcontributors(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, A_0 value) {
		Base.set(model, instanceResource, LISTOFCONTRIBUTORS, value);
	}
	
    /**
     * Sets a value of property Listofcontributors from an instance of A_0 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setbiboListofcontributors(A_0 value) {
		Base.set(this.model, this.getResource(), LISTOFCONTRIBUTORS, value);
	}
  


    /**
     * Removes a value of property Listofcontributors as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removebiboListofcontributors( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, LISTOFCONTRIBUTORS, value);
	}
	
    /**
     * Removes a value of property Listofcontributors as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removebiboListofcontributors( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), LISTOFCONTRIBUTORS, value);
	}
    /**
     * Removes a value of property Listofcontributors given as an instance of A_0 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removebiboListofcontributors(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, A_0 value) {
		Base.remove(model, instanceResource, LISTOFCONTRIBUTORS, value);
	}
	
    /**
     * Removes a value of property Listofcontributors given as an instance of A_0 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removebiboListofcontributors(A_0 value) {
		Base.remove(this.model, this.getResource(), LISTOFCONTRIBUTORS, value);
	}
  
    /**
     * Removes all values of property Listofcontributors     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllbiboListofcontributors( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, LISTOFCONTRIBUTORS);
	}
	
    /**
     * Removes all values of property Listofcontributors	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllbiboListofcontributors() {
		Base.removeAll(this.model, this.getResource(), LISTOFCONTRIBUTORS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7cee97 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasbiboListofeditors(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, LISTOFEDITORS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7cee97 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasbiboListofeditors() {
		return Base.has(this.model, this.getResource(), LISTOFEDITORS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7cee97 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasbiboListofeditors(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, LISTOFEDITORS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7cee97 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasbiboListofeditors( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), LISTOFEDITORS);
	}

     /**
     * Get all values of property Listofeditors as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboListofeditors_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, LISTOFEDITORS);
	}
	
    /**
     * Get all values of property Listofeditors as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboListofeditors_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LISTOFEDITORS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Listofeditors as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboListofeditors_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), LISTOFEDITORS);
	}

    /**
     * Get all values of property Listofeditors as a ReactorResult of RDF2Go nodes 
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboListofeditors_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), LISTOFEDITORS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Listofeditors     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<A_0> getAllbiboListofeditors(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, LISTOFEDITORS, A_0.class);
	}
	
    /**
     * Get all values of property Listofeditors as a ReactorResult of A_0 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<A_0> getAllbiboListofeditors_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LISTOFEDITORS, A_0.class);
	}

    /**
     * Get all values of property Listofeditors     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<A_0> getAllbiboListofeditors() {
		return Base.getAll(this.model, this.getResource(), LISTOFEDITORS, A_0.class);
	}

    /**
     * Get all values of property Listofeditors as a ReactorResult of A_0 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<A_0> getAllbiboListofeditors_as() {
		return Base.getAll_as(this.model, this.getResource(), LISTOFEDITORS, A_0.class);
	}
 
    /**
     * Adds a value to property Listofeditors as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addbiboListofeditors( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, LISTOFEDITORS, value);
	}
	
    /**
     * Adds a value to property Listofeditors as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addbiboListofeditors( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), LISTOFEDITORS, value);
	}
    /**
     * Adds a value to property Listofeditors from an instance of A_0 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addbiboListofeditors(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, A_0 value) {
		Base.add(model, instanceResource, LISTOFEDITORS, value);
	}
	
    /**
     * Adds a value to property Listofeditors from an instance of A_0 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addbiboListofeditors(A_0 value) {
		Base.add(this.model, this.getResource(), LISTOFEDITORS, value);
	}
  

    /**
     * Sets a value of property Listofeditors from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setbiboListofeditors( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, LISTOFEDITORS, value);
	}
	
    /**
     * Sets a value of property Listofeditors from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setbiboListofeditors( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), LISTOFEDITORS, value);
	}
    /**
     * Sets a value of property Listofeditors from an instance of A_0 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setbiboListofeditors(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, A_0 value) {
		Base.set(model, instanceResource, LISTOFEDITORS, value);
	}
	
    /**
     * Sets a value of property Listofeditors from an instance of A_0 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setbiboListofeditors(A_0 value) {
		Base.set(this.model, this.getResource(), LISTOFEDITORS, value);
	}
  


    /**
     * Removes a value of property Listofeditors as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removebiboListofeditors( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, LISTOFEDITORS, value);
	}
	
    /**
     * Removes a value of property Listofeditors as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removebiboListofeditors( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), LISTOFEDITORS, value);
	}
    /**
     * Removes a value of property Listofeditors given as an instance of A_0 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removebiboListofeditors(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, A_0 value) {
		Base.remove(model, instanceResource, LISTOFEDITORS, value);
	}
	
    /**
     * Removes a value of property Listofeditors given as an instance of A_0 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removebiboListofeditors(A_0 value) {
		Base.remove(this.model, this.getResource(), LISTOFEDITORS, value);
	}
  
    /**
     * Removes all values of property Listofeditors     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllbiboListofeditors( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, LISTOFEDITORS);
	}
	
    /**
     * Removes all values of property Listofeditors	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllbiboListofeditors() {
		Base.removeAll(this.model, this.getResource(), LISTOFEDITORS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3be57e has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasbiboLocator(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, LOCATOR);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3be57e has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasbiboLocator() {
		return Base.has(this.model, this.getResource(), LOCATOR);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3be57e has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasbiboLocator(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, LOCATOR);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3be57e has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasbiboLocator( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), LOCATOR);
	}

     /**
     * Get all values of property Locator as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboLocator_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, LOCATOR);
	}
	
    /**
     * Get all values of property Locator as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboLocator_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LOCATOR, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Locator as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboLocator_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), LOCATOR);
	}

    /**
     * Get all values of property Locator as a ReactorResult of RDF2Go nodes 
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboLocator_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), LOCATOR, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Locator     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllbiboLocator(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, LOCATOR, java.lang.String.class);
	}
	
    /**
     * Get all values of property Locator as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllbiboLocator_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LOCATOR, java.lang.String.class);
	}

    /**
     * Get all values of property Locator     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllbiboLocator() {
		return Base.getAll(this.model, this.getResource(), LOCATOR, java.lang.String.class);
	}

    /**
     * Get all values of property Locator as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllbiboLocator_as() {
		return Base.getAll_as(this.model, this.getResource(), LOCATOR, java.lang.String.class);
	}
 
    /**
     * Adds a value to property Locator as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addbiboLocator( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, LOCATOR, value);
	}
	
    /**
     * Adds a value to property Locator as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addbiboLocator( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), LOCATOR, value);
	}
    /**
     * Adds a value to property Locator from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addbiboLocator(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, LOCATOR, value);
	}
	
    /**
     * Adds a value to property Locator from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addbiboLocator(java.lang.String value) {
		Base.add(this.model, this.getResource(), LOCATOR, value);
	}
  

    /**
     * Sets a value of property Locator from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setbiboLocator( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, LOCATOR, value);
	}
	
    /**
     * Sets a value of property Locator from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setbiboLocator( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), LOCATOR, value);
	}
    /**
     * Sets a value of property Locator from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setbiboLocator(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, LOCATOR, value);
	}
	
    /**
     * Sets a value of property Locator from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setbiboLocator(java.lang.String value) {
		Base.set(this.model, this.getResource(), LOCATOR, value);
	}
  


    /**
     * Removes a value of property Locator as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removebiboLocator( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, LOCATOR, value);
	}
	
    /**
     * Removes a value of property Locator as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removebiboLocator( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), LOCATOR, value);
	}
    /**
     * Removes a value of property Locator given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removebiboLocator(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, LOCATOR, value);
	}
	
    /**
     * Removes a value of property Locator given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removebiboLocator(java.lang.String value) {
		Base.remove(this.model, this.getResource(), LOCATOR, value);
	}
  
    /**
     * Removes all values of property Locator     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllbiboLocator( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, LOCATOR);
	}
	
    /**
     * Removes all values of property Locator	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllbiboLocator() {
		Base.removeAll(this.model, this.getResource(), LOCATOR);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@10d47ce has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasbiboNumber(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, NUMBER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@10d47ce has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasbiboNumber() {
		return Base.has(this.model, this.getResource(), NUMBER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@10d47ce has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasbiboNumber(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, NUMBER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@10d47ce has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasbiboNumber( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), NUMBER);
	}

     /**
     * Get all values of property Number as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboNumber_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, NUMBER);
	}
	
    /**
     * Get all values of property Number as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboNumber_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NUMBER, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Number as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboNumber_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), NUMBER);
	}

    /**
     * Get all values of property Number as a ReactorResult of RDF2Go nodes 
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboNumber_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), NUMBER, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Number     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllbiboNumber(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, NUMBER, java.lang.String.class);
	}
	
    /**
     * Get all values of property Number as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllbiboNumber_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NUMBER, java.lang.String.class);
	}

    /**
     * Get all values of property Number     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllbiboNumber() {
		return Base.getAll(this.model, this.getResource(), NUMBER, java.lang.String.class);
	}

    /**
     * Get all values of property Number as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllbiboNumber_as() {
		return Base.getAll_as(this.model, this.getResource(), NUMBER, java.lang.String.class);
	}
 
    /**
     * Adds a value to property Number as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addbiboNumber( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, NUMBER, value);
	}
	
    /**
     * Adds a value to property Number as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addbiboNumber( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), NUMBER, value);
	}
    /**
     * Adds a value to property Number from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addbiboNumber(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, NUMBER, value);
	}
	
    /**
     * Adds a value to property Number from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addbiboNumber(java.lang.String value) {
		Base.add(this.model, this.getResource(), NUMBER, value);
	}
  

    /**
     * Sets a value of property Number from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setbiboNumber( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, NUMBER, value);
	}
	
    /**
     * Sets a value of property Number from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setbiboNumber( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), NUMBER, value);
	}
    /**
     * Sets a value of property Number from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setbiboNumber(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, NUMBER, value);
	}
	
    /**
     * Sets a value of property Number from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setbiboNumber(java.lang.String value) {
		Base.set(this.model, this.getResource(), NUMBER, value);
	}
  


    /**
     * Removes a value of property Number as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removebiboNumber( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, NUMBER, value);
	}
	
    /**
     * Removes a value of property Number as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removebiboNumber( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), NUMBER, value);
	}
    /**
     * Removes a value of property Number given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removebiboNumber(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, NUMBER, value);
	}
	
    /**
     * Removes a value of property Number given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removebiboNumber(java.lang.String value) {
		Base.remove(this.model, this.getResource(), NUMBER, value);
	}
  
    /**
     * Removes all values of property Number     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllbiboNumber( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, NUMBER);
	}
	
    /**
     * Removes all values of property Number	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllbiboNumber() {
		Base.removeAll(this.model, this.getResource(), NUMBER);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@8f0737 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasbiboNumberofpages(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, NUMBEROFPAGES);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@8f0737 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasbiboNumberofpages() {
		return Base.has(this.model, this.getResource(), NUMBEROFPAGES);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@8f0737 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasbiboNumberofpages(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, NUMBEROFPAGES);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@8f0737 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasbiboNumberofpages( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), NUMBEROFPAGES);
	}

     /**
     * Get all values of property Numberofpages as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboNumberofpages_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, NUMBEROFPAGES);
	}
	
    /**
     * Get all values of property Numberofpages as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboNumberofpages_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NUMBEROFPAGES, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Numberofpages as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboNumberofpages_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), NUMBEROFPAGES);
	}

    /**
     * Get all values of property Numberofpages as a ReactorResult of RDF2Go nodes 
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboNumberofpages_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), NUMBEROFPAGES, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Numberofpages     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllbiboNumberofpages(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, NUMBEROFPAGES, java.lang.String.class);
	}
	
    /**
     * Get all values of property Numberofpages as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllbiboNumberofpages_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NUMBEROFPAGES, java.lang.String.class);
	}

    /**
     * Get all values of property Numberofpages     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllbiboNumberofpages() {
		return Base.getAll(this.model, this.getResource(), NUMBEROFPAGES, java.lang.String.class);
	}

    /**
     * Get all values of property Numberofpages as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllbiboNumberofpages_as() {
		return Base.getAll_as(this.model, this.getResource(), NUMBEROFPAGES, java.lang.String.class);
	}
 
    /**
     * Adds a value to property Numberofpages as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addbiboNumberofpages( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, NUMBEROFPAGES, value);
	}
	
    /**
     * Adds a value to property Numberofpages as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addbiboNumberofpages( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), NUMBEROFPAGES, value);
	}
    /**
     * Adds a value to property Numberofpages from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addbiboNumberofpages(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, NUMBEROFPAGES, value);
	}
	
    /**
     * Adds a value to property Numberofpages from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addbiboNumberofpages(java.lang.String value) {
		Base.add(this.model, this.getResource(), NUMBEROFPAGES, value);
	}
  

    /**
     * Sets a value of property Numberofpages from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setbiboNumberofpages( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, NUMBEROFPAGES, value);
	}
	
    /**
     * Sets a value of property Numberofpages from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setbiboNumberofpages( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), NUMBEROFPAGES, value);
	}
    /**
     * Sets a value of property Numberofpages from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setbiboNumberofpages(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, NUMBEROFPAGES, value);
	}
	
    /**
     * Sets a value of property Numberofpages from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setbiboNumberofpages(java.lang.String value) {
		Base.set(this.model, this.getResource(), NUMBEROFPAGES, value);
	}
  


    /**
     * Removes a value of property Numberofpages as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removebiboNumberofpages( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, NUMBEROFPAGES, value);
	}
	
    /**
     * Removes a value of property Numberofpages as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removebiboNumberofpages( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), NUMBEROFPAGES, value);
	}
    /**
     * Removes a value of property Numberofpages given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removebiboNumberofpages(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, NUMBEROFPAGES, value);
	}
	
    /**
     * Removes a value of property Numberofpages given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removebiboNumberofpages(java.lang.String value) {
		Base.remove(this.model, this.getResource(), NUMBEROFPAGES, value);
	}
  
    /**
     * Removes all values of property Numberofpages     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllbiboNumberofpages( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, NUMBEROFPAGES);
	}
	
    /**
     * Removes all values of property Numberofpages	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllbiboNumberofpages() {
		Base.removeAll(this.model, this.getResource(), NUMBEROFPAGES);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@114f847 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasbiboPageend(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PAGEEND);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@114f847 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasbiboPageend() {
		return Base.has(this.model, this.getResource(), PAGEEND);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@114f847 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasbiboPageend(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PAGEEND);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@114f847 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasbiboPageend( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PAGEEND);
	}

     /**
     * Get all values of property Pageend as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboPageend_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PAGEEND);
	}
	
    /**
     * Get all values of property Pageend as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboPageend_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PAGEEND, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Pageend as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboPageend_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PAGEEND);
	}

    /**
     * Get all values of property Pageend as a ReactorResult of RDF2Go nodes 
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboPageend_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PAGEEND, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Pageend     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllbiboPageend(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PAGEEND, java.lang.String.class);
	}
	
    /**
     * Get all values of property Pageend as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllbiboPageend_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PAGEEND, java.lang.String.class);
	}

    /**
     * Get all values of property Pageend     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllbiboPageend() {
		return Base.getAll(this.model, this.getResource(), PAGEEND, java.lang.String.class);
	}

    /**
     * Get all values of property Pageend as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllbiboPageend_as() {
		return Base.getAll_as(this.model, this.getResource(), PAGEEND, java.lang.String.class);
	}
 
    /**
     * Adds a value to property Pageend as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addbiboPageend( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PAGEEND, value);
	}
	
    /**
     * Adds a value to property Pageend as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addbiboPageend( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PAGEEND, value);
	}
    /**
     * Adds a value to property Pageend from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addbiboPageend(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, PAGEEND, value);
	}
	
    /**
     * Adds a value to property Pageend from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addbiboPageend(java.lang.String value) {
		Base.add(this.model, this.getResource(), PAGEEND, value);
	}
  

    /**
     * Sets a value of property Pageend from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setbiboPageend( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PAGEEND, value);
	}
	
    /**
     * Sets a value of property Pageend from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setbiboPageend( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PAGEEND, value);
	}
    /**
     * Sets a value of property Pageend from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setbiboPageend(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, PAGEEND, value);
	}
	
    /**
     * Sets a value of property Pageend from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setbiboPageend(java.lang.String value) {
		Base.set(this.model, this.getResource(), PAGEEND, value);
	}
  


    /**
     * Removes a value of property Pageend as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removebiboPageend( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PAGEEND, value);
	}
	
    /**
     * Removes a value of property Pageend as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removebiboPageend( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PAGEEND, value);
	}
    /**
     * Removes a value of property Pageend given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removebiboPageend(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, PAGEEND, value);
	}
	
    /**
     * Removes a value of property Pageend given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removebiboPageend(java.lang.String value) {
		Base.remove(this.model, this.getResource(), PAGEEND, value);
	}
  
    /**
     * Removes all values of property Pageend     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllbiboPageend( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PAGEEND);
	}
	
    /**
     * Removes all values of property Pageend	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllbiboPageend() {
		Base.removeAll(this.model, this.getResource(), PAGEEND);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@19b15fa has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasbiboPages(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PAGES);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@19b15fa has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasbiboPages() {
		return Base.has(this.model, this.getResource(), PAGES);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@19b15fa has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasbiboPages(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PAGES);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@19b15fa has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasbiboPages( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PAGES);
	}

     /**
     * Get all values of property Pages as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboPages_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PAGES);
	}
	
    /**
     * Get all values of property Pages as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboPages_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PAGES, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Pages as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboPages_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PAGES);
	}

    /**
     * Get all values of property Pages as a ReactorResult of RDF2Go nodes 
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboPages_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PAGES, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Pages     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllbiboPages(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PAGES, java.lang.String.class);
	}
	
    /**
     * Get all values of property Pages as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllbiboPages_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PAGES, java.lang.String.class);
	}

    /**
     * Get all values of property Pages     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllbiboPages() {
		return Base.getAll(this.model, this.getResource(), PAGES, java.lang.String.class);
	}

    /**
     * Get all values of property Pages as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllbiboPages_as() {
		return Base.getAll_as(this.model, this.getResource(), PAGES, java.lang.String.class);
	}
 
    /**
     * Adds a value to property Pages as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addbiboPages( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PAGES, value);
	}
	
    /**
     * Adds a value to property Pages as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addbiboPages( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PAGES, value);
	}
    /**
     * Adds a value to property Pages from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addbiboPages(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, PAGES, value);
	}
	
    /**
     * Adds a value to property Pages from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addbiboPages(java.lang.String value) {
		Base.add(this.model, this.getResource(), PAGES, value);
	}
  

    /**
     * Sets a value of property Pages from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setbiboPages( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PAGES, value);
	}
	
    /**
     * Sets a value of property Pages from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setbiboPages( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PAGES, value);
	}
    /**
     * Sets a value of property Pages from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setbiboPages(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, PAGES, value);
	}
	
    /**
     * Sets a value of property Pages from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setbiboPages(java.lang.String value) {
		Base.set(this.model, this.getResource(), PAGES, value);
	}
  


    /**
     * Removes a value of property Pages as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removebiboPages( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PAGES, value);
	}
	
    /**
     * Removes a value of property Pages as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removebiboPages( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PAGES, value);
	}
    /**
     * Removes a value of property Pages given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removebiboPages(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, PAGES, value);
	}
	
    /**
     * Removes a value of property Pages given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removebiboPages(java.lang.String value) {
		Base.remove(this.model, this.getResource(), PAGES, value);
	}
  
    /**
     * Removes all values of property Pages     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllbiboPages( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PAGES);
	}
	
    /**
     * Removes all values of property Pages	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllbiboPages() {
		Base.removeAll(this.model, this.getResource(), PAGES);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@15025ff has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasbiboPagestart(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PAGESTART);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@15025ff has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasbiboPagestart() {
		return Base.has(this.model, this.getResource(), PAGESTART);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@15025ff has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasbiboPagestart(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PAGESTART);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@15025ff has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasbiboPagestart( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PAGESTART);
	}

     /**
     * Get all values of property Pagestart as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboPagestart_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PAGESTART);
	}
	
    /**
     * Get all values of property Pagestart as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboPagestart_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PAGESTART, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Pagestart as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboPagestart_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PAGESTART);
	}

    /**
     * Get all values of property Pagestart as a ReactorResult of RDF2Go nodes 
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboPagestart_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PAGESTART, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Pagestart     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllbiboPagestart(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PAGESTART, java.lang.String.class);
	}
	
    /**
     * Get all values of property Pagestart as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllbiboPagestart_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PAGESTART, java.lang.String.class);
	}

    /**
     * Get all values of property Pagestart     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllbiboPagestart() {
		return Base.getAll(this.model, this.getResource(), PAGESTART, java.lang.String.class);
	}

    /**
     * Get all values of property Pagestart as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllbiboPagestart_as() {
		return Base.getAll_as(this.model, this.getResource(), PAGESTART, java.lang.String.class);
	}
 
    /**
     * Adds a value to property Pagestart as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addbiboPagestart( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PAGESTART, value);
	}
	
    /**
     * Adds a value to property Pagestart as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addbiboPagestart( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PAGESTART, value);
	}
    /**
     * Adds a value to property Pagestart from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addbiboPagestart(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, PAGESTART, value);
	}
	
    /**
     * Adds a value to property Pagestart from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addbiboPagestart(java.lang.String value) {
		Base.add(this.model, this.getResource(), PAGESTART, value);
	}
  

    /**
     * Sets a value of property Pagestart from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setbiboPagestart( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PAGESTART, value);
	}
	
    /**
     * Sets a value of property Pagestart from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setbiboPagestart( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PAGESTART, value);
	}
    /**
     * Sets a value of property Pagestart from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setbiboPagestart(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, PAGESTART, value);
	}
	
    /**
     * Sets a value of property Pagestart from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setbiboPagestart(java.lang.String value) {
		Base.set(this.model, this.getResource(), PAGESTART, value);
	}
  


    /**
     * Removes a value of property Pagestart as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removebiboPagestart( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PAGESTART, value);
	}
	
    /**
     * Removes a value of property Pagestart as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removebiboPagestart( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PAGESTART, value);
	}
    /**
     * Removes a value of property Pagestart given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removebiboPagestart(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, PAGESTART, value);
	}
	
    /**
     * Removes a value of property Pagestart given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removebiboPagestart(java.lang.String value) {
		Base.remove(this.model, this.getResource(), PAGESTART, value);
	}
  
    /**
     * Removes all values of property Pagestart     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllbiboPagestart( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PAGESTART);
	}
	
    /**
     * Removes all values of property Pagestart	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllbiboPagestart() {
		Base.removeAll(this.model, this.getResource(), PAGESTART);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@ad3cc6 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasbiboPresentedat(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PRESENTEDAT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@ad3cc6 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasbiboPresentedat() {
		return Base.has(this.model, this.getResource(), PRESENTEDAT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@ad3cc6 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasbiboPresentedat(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PRESENTEDAT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@ad3cc6 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasbiboPresentedat( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PRESENTEDAT);
	}

     /**
     * Get all values of property Presentedat as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboPresentedat_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PRESENTEDAT);
	}
	
    /**
     * Get all values of property Presentedat as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboPresentedat_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PRESENTEDAT, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Presentedat as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboPresentedat_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PRESENTEDAT);
	}

    /**
     * Get all values of property Presentedat as a ReactorResult of RDF2Go nodes 
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboPresentedat_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PRESENTEDAT, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Presentedat     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<BiboEvent> getAllbiboPresentedat(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PRESENTEDAT, BiboEvent.class);
	}
	
    /**
     * Get all values of property Presentedat as a ReactorResult of BiboEvent 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<BiboEvent> getAllbiboPresentedat_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PRESENTEDAT, BiboEvent.class);
	}

    /**
     * Get all values of property Presentedat     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<BiboEvent> getAllbiboPresentedat() {
		return Base.getAll(this.model, this.getResource(), PRESENTEDAT, BiboEvent.class);
	}

    /**
     * Get all values of property Presentedat as a ReactorResult of BiboEvent 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<BiboEvent> getAllbiboPresentedat_as() {
		return Base.getAll_as(this.model, this.getResource(), PRESENTEDAT, BiboEvent.class);
	}
 
    /**
     * Adds a value to property Presentedat as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addbiboPresentedat( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PRESENTEDAT, value);
	}
	
    /**
     * Adds a value to property Presentedat as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addbiboPresentedat( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PRESENTEDAT, value);
	}
    /**
     * Adds a value to property Presentedat from an instance of BiboEvent 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addbiboPresentedat(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, BiboEvent value) {
		Base.add(model, instanceResource, PRESENTEDAT, value);
	}
	
    /**
     * Adds a value to property Presentedat from an instance of BiboEvent 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addbiboPresentedat(BiboEvent value) {
		Base.add(this.model, this.getResource(), PRESENTEDAT, value);
	}
  

    /**
     * Sets a value of property Presentedat from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setbiboPresentedat( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PRESENTEDAT, value);
	}
	
    /**
     * Sets a value of property Presentedat from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setbiboPresentedat( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PRESENTEDAT, value);
	}
    /**
     * Sets a value of property Presentedat from an instance of BiboEvent 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setbiboPresentedat(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, BiboEvent value) {
		Base.set(model, instanceResource, PRESENTEDAT, value);
	}
	
    /**
     * Sets a value of property Presentedat from an instance of BiboEvent 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setbiboPresentedat(BiboEvent value) {
		Base.set(this.model, this.getResource(), PRESENTEDAT, value);
	}
  


    /**
     * Removes a value of property Presentedat as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removebiboPresentedat( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PRESENTEDAT, value);
	}
	
    /**
     * Removes a value of property Presentedat as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removebiboPresentedat( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PRESENTEDAT, value);
	}
    /**
     * Removes a value of property Presentedat given as an instance of BiboEvent 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removebiboPresentedat(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, BiboEvent value) {
		Base.remove(model, instanceResource, PRESENTEDAT, value);
	}
	
    /**
     * Removes a value of property Presentedat given as an instance of BiboEvent 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removebiboPresentedat(BiboEvent value) {
		Base.remove(this.model, this.getResource(), PRESENTEDAT, value);
	}
  
    /**
     * Removes all values of property Presentedat     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllbiboPresentedat( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PRESENTEDAT);
	}
	
    /**
     * Removes all values of property Presentedat	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllbiboPresentedat() {
		Base.removeAll(this.model, this.getResource(), PRESENTEDAT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@a058a6 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasbiboReproducedIn(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, REPRODUCEDIN);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@a058a6 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasbiboReproducedIn() {
		return Base.has(this.model, this.getResource(), REPRODUCEDIN);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@a058a6 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasbiboReproducedIn(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, REPRODUCEDIN);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@a058a6 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasbiboReproducedIn( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), REPRODUCEDIN);
	}

     /**
     * Get all values of property ReproducedIn as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboReproducedIn_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, REPRODUCEDIN);
	}
	
    /**
     * Get all values of property ReproducedIn as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboReproducedIn_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, REPRODUCEDIN, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ReproducedIn as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboReproducedIn_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), REPRODUCEDIN);
	}

    /**
     * Get all values of property ReproducedIn as a ReactorResult of RDF2Go nodes 
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboReproducedIn_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), REPRODUCEDIN, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ReproducedIn     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Document> getAllbiboReproducedIn(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, REPRODUCEDIN, Document.class);
	}
	
    /**
     * Get all values of property ReproducedIn as a ReactorResult of Document 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Document> getAllbiboReproducedIn_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, REPRODUCEDIN, Document.class);
	}

    /**
     * Get all values of property ReproducedIn     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Document> getAllbiboReproducedIn() {
		return Base.getAll(this.model, this.getResource(), REPRODUCEDIN, Document.class);
	}

    /**
     * Get all values of property ReproducedIn as a ReactorResult of Document 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Document> getAllbiboReproducedIn_as() {
		return Base.getAll_as(this.model, this.getResource(), REPRODUCEDIN, Document.class);
	}
 
    /**
     * Adds a value to property ReproducedIn as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addbiboReproducedIn( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, REPRODUCEDIN, value);
	}
	
    /**
     * Adds a value to property ReproducedIn as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addbiboReproducedIn( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), REPRODUCEDIN, value);
	}
    /**
     * Adds a value to property ReproducedIn from an instance of Document 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addbiboReproducedIn(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Document value) {
		Base.add(model, instanceResource, REPRODUCEDIN, value);
	}
	
    /**
     * Adds a value to property ReproducedIn from an instance of Document 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addbiboReproducedIn(Document value) {
		Base.add(this.model, this.getResource(), REPRODUCEDIN, value);
	}
  

    /**
     * Sets a value of property ReproducedIn from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setbiboReproducedIn( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, REPRODUCEDIN, value);
	}
	
    /**
     * Sets a value of property ReproducedIn from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setbiboReproducedIn( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), REPRODUCEDIN, value);
	}
    /**
     * Sets a value of property ReproducedIn from an instance of Document 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setbiboReproducedIn(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Document value) {
		Base.set(model, instanceResource, REPRODUCEDIN, value);
	}
	
    /**
     * Sets a value of property ReproducedIn from an instance of Document 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setbiboReproducedIn(Document value) {
		Base.set(this.model, this.getResource(), REPRODUCEDIN, value);
	}
  


    /**
     * Removes a value of property ReproducedIn as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removebiboReproducedIn( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, REPRODUCEDIN, value);
	}
	
    /**
     * Removes a value of property ReproducedIn as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removebiboReproducedIn( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), REPRODUCEDIN, value);
	}
    /**
     * Removes a value of property ReproducedIn given as an instance of Document 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removebiboReproducedIn(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Document value) {
		Base.remove(model, instanceResource, REPRODUCEDIN, value);
	}
	
    /**
     * Removes a value of property ReproducedIn given as an instance of Document 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removebiboReproducedIn(Document value) {
		Base.remove(this.model, this.getResource(), REPRODUCEDIN, value);
	}
  
    /**
     * Removes all values of property ReproducedIn     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllbiboReproducedIn( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, REPRODUCEDIN);
	}
	
    /**
     * Removes all values of property ReproducedIn	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllbiboReproducedIn() {
		Base.removeAll(this.model, this.getResource(), REPRODUCEDIN);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@14528d1 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasbiboReviewof(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, REVIEWOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@14528d1 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasbiboReviewof() {
		return Base.has(this.model, this.getResource(), REVIEWOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@14528d1 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasbiboReviewof(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, REVIEWOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@14528d1 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasbiboReviewof( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), REVIEWOF);
	}

     /**
     * Get all values of property Reviewof as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboReviewof_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, REVIEWOF);
	}
	
    /**
     * Get all values of property Reviewof as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboReviewof_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, REVIEWOF, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Reviewof as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboReviewof_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), REVIEWOF);
	}

    /**
     * Get all values of property Reviewof as a ReactorResult of RDF2Go nodes 
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboReviewof_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), REVIEWOF, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Reviewof     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllbiboReviewof(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, REVIEWOF, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}
	
    /**
     * Get all values of property Reviewof as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllbiboReviewof_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, REVIEWOF, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property Reviewof     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllbiboReviewof() {
		return Base.getAll(this.model, this.getResource(), REVIEWOF, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property Reviewof as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllbiboReviewof_as() {
		return Base.getAll_as(this.model, this.getResource(), REVIEWOF, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}
 
    /**
     * Adds a value to property Reviewof as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addbiboReviewof( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, REVIEWOF, value);
	}
	
    /**
     * Adds a value to property Reviewof as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addbiboReviewof( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), REVIEWOF, value);
	}
    /**
     * Adds a value to property Reviewof from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addbiboReviewof(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(model, instanceResource, REVIEWOF, value);
	}
	
    /**
     * Adds a value to property Reviewof from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addbiboReviewof(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(this.model, this.getResource(), REVIEWOF, value);
	}
  

    /**
     * Sets a value of property Reviewof from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setbiboReviewof( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, REVIEWOF, value);
	}
	
    /**
     * Sets a value of property Reviewof from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setbiboReviewof( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), REVIEWOF, value);
	}
    /**
     * Sets a value of property Reviewof from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setbiboReviewof(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(model, instanceResource, REVIEWOF, value);
	}
	
    /**
     * Sets a value of property Reviewof from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setbiboReviewof(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(this.model, this.getResource(), REVIEWOF, value);
	}
  


    /**
     * Removes a value of property Reviewof as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removebiboReviewof( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, REVIEWOF, value);
	}
	
    /**
     * Removes a value of property Reviewof as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removebiboReviewof( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), REVIEWOF, value);
	}
    /**
     * Removes a value of property Reviewof given as an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removebiboReviewof(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(model, instanceResource, REVIEWOF, value);
	}
	
    /**
     * Removes a value of property Reviewof given as an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removebiboReviewof(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(this.model, this.getResource(), REVIEWOF, value);
	}
  
    /**
     * Removes all values of property Reviewof     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllbiboReviewof( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, REVIEWOF);
	}
	
    /**
     * Removes all values of property Reviewof	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllbiboReviewof() {
		Base.removeAll(this.model, this.getResource(), REVIEWOF);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1999af9 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasbiboSection(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SECTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1999af9 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasbiboSection() {
		return Base.has(this.model, this.getResource(), SECTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1999af9 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasbiboSection(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SECTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1999af9 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasbiboSection( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SECTION);
	}

     /**
     * Get all values of property SectionE as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboSection_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SECTION);
	}
	
    /**
     * Get all values of property SectionE as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboSection_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SECTION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property SectionE as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboSection_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SECTION);
	}

    /**
     * Get all values of property SectionE as a ReactorResult of RDF2Go nodes 
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboSection_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SECTION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property SectionE     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllbiboSection(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SECTION, java.lang.String.class);
	}
	
    /**
     * Get all values of property SectionE as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllbiboSection_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SECTION, java.lang.String.class);
	}

    /**
     * Get all values of property SectionE     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllbiboSection() {
		return Base.getAll(this.model, this.getResource(), SECTION, java.lang.String.class);
	}

    /**
     * Get all values of property SectionE as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllbiboSection_as() {
		return Base.getAll_as(this.model, this.getResource(), SECTION, java.lang.String.class);
	}
 
    /**
     * Adds a value to property SectionE as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addbiboSection( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SECTION, value);
	}
	
    /**
     * Adds a value to property SectionE as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addbiboSection( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SECTION, value);
	}
    /**
     * Adds a value to property SectionE from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addbiboSection(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, SECTION, value);
	}
	
    /**
     * Adds a value to property SectionE from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addbiboSection(java.lang.String value) {
		Base.add(this.model, this.getResource(), SECTION, value);
	}
  

    /**
     * Sets a value of property SectionE from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setbiboSection( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SECTION, value);
	}
	
    /**
     * Sets a value of property SectionE from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setbiboSection( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SECTION, value);
	}
    /**
     * Sets a value of property SectionE from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setbiboSection(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, SECTION, value);
	}
	
    /**
     * Sets a value of property SectionE from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setbiboSection(java.lang.String value) {
		Base.set(this.model, this.getResource(), SECTION, value);
	}
  


    /**
     * Removes a value of property SectionE as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removebiboSection( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SECTION, value);
	}
	
    /**
     * Removes a value of property SectionE as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removebiboSection( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SECTION, value);
	}
    /**
     * Removes a value of property SectionE given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removebiboSection(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, SECTION, value);
	}
	
    /**
     * Removes a value of property SectionE given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removebiboSection(java.lang.String value) {
		Base.remove(this.model, this.getResource(), SECTION, value);
	}
  
    /**
     * Removes all values of property SectionE     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllbiboSection( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SECTION);
	}
	
    /**
     * Removes all values of property SectionE	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllbiboSection() {
		Base.removeAll(this.model, this.getResource(), SECTION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@ab3ad0 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasbiboShortDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SHORTDESCRIPTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@ab3ad0 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasbiboShortDescription() {
		return Base.has(this.model, this.getResource(), SHORTDESCRIPTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@ab3ad0 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasbiboShortDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SHORTDESCRIPTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@ab3ad0 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasbiboShortDescription( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SHORTDESCRIPTION);
	}

     /**
     * Get all values of property ShortDescription as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboShortDescription_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SHORTDESCRIPTION);
	}
	
    /**
     * Get all values of property ShortDescription as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboShortDescription_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SHORTDESCRIPTION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ShortDescription as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboShortDescription_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SHORTDESCRIPTION);
	}

    /**
     * Get all values of property ShortDescription as a ReactorResult of RDF2Go nodes 
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboShortDescription_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SHORTDESCRIPTION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ShortDescription     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllbiboShortDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SHORTDESCRIPTION, java.lang.String.class);
	}
	
    /**
     * Get all values of property ShortDescription as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllbiboShortDescription_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SHORTDESCRIPTION, java.lang.String.class);
	}

    /**
     * Get all values of property ShortDescription     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllbiboShortDescription() {
		return Base.getAll(this.model, this.getResource(), SHORTDESCRIPTION, java.lang.String.class);
	}

    /**
     * Get all values of property ShortDescription as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllbiboShortDescription_as() {
		return Base.getAll_as(this.model, this.getResource(), SHORTDESCRIPTION, java.lang.String.class);
	}
 
    /**
     * Adds a value to property ShortDescription as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addbiboShortDescription( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SHORTDESCRIPTION, value);
	}
	
    /**
     * Adds a value to property ShortDescription as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addbiboShortDescription( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SHORTDESCRIPTION, value);
	}
    /**
     * Adds a value to property ShortDescription from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addbiboShortDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, SHORTDESCRIPTION, value);
	}
	
    /**
     * Adds a value to property ShortDescription from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addbiboShortDescription(java.lang.String value) {
		Base.add(this.model, this.getResource(), SHORTDESCRIPTION, value);
	}
  

    /**
     * Sets a value of property ShortDescription from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setbiboShortDescription( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SHORTDESCRIPTION, value);
	}
	
    /**
     * Sets a value of property ShortDescription from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setbiboShortDescription( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SHORTDESCRIPTION, value);
	}
    /**
     * Sets a value of property ShortDescription from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setbiboShortDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, SHORTDESCRIPTION, value);
	}
	
    /**
     * Sets a value of property ShortDescription from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setbiboShortDescription(java.lang.String value) {
		Base.set(this.model, this.getResource(), SHORTDESCRIPTION, value);
	}
  


    /**
     * Removes a value of property ShortDescription as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removebiboShortDescription( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SHORTDESCRIPTION, value);
	}
	
    /**
     * Removes a value of property ShortDescription as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removebiboShortDescription( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SHORTDESCRIPTION, value);
	}
    /**
     * Removes a value of property ShortDescription given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removebiboShortDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, SHORTDESCRIPTION, value);
	}
	
    /**
     * Removes a value of property ShortDescription given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removebiboShortDescription(java.lang.String value) {
		Base.remove(this.model, this.getResource(), SHORTDESCRIPTION, value);
	}
  
    /**
     * Removes all values of property ShortDescription     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllbiboShortDescription( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SHORTDESCRIPTION);
	}
	
    /**
     * Removes all values of property ShortDescription	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllbiboShortDescription() {
		Base.removeAll(this.model, this.getResource(), SHORTDESCRIPTION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1fbe9cd has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasbiboShorttitle(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SHORTTITLE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1fbe9cd has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasbiboShorttitle() {
		return Base.has(this.model, this.getResource(), SHORTTITLE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1fbe9cd has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasbiboShorttitle(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SHORTTITLE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1fbe9cd has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasbiboShorttitle( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SHORTTITLE);
	}

     /**
     * Get all values of property Shorttitle as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboShorttitle_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SHORTTITLE);
	}
	
    /**
     * Get all values of property Shorttitle as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboShorttitle_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SHORTTITLE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Shorttitle as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboShorttitle_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SHORTTITLE);
	}

    /**
     * Get all values of property Shorttitle as a ReactorResult of RDF2Go nodes 
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboShorttitle_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SHORTTITLE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Shorttitle     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllbiboShorttitle(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SHORTTITLE, java.lang.String.class);
	}
	
    /**
     * Get all values of property Shorttitle as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllbiboShorttitle_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SHORTTITLE, java.lang.String.class);
	}

    /**
     * Get all values of property Shorttitle     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllbiboShorttitle() {
		return Base.getAll(this.model, this.getResource(), SHORTTITLE, java.lang.String.class);
	}

    /**
     * Get all values of property Shorttitle as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllbiboShorttitle_as() {
		return Base.getAll_as(this.model, this.getResource(), SHORTTITLE, java.lang.String.class);
	}
 
    /**
     * Adds a value to property Shorttitle as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addbiboShorttitle( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SHORTTITLE, value);
	}
	
    /**
     * Adds a value to property Shorttitle as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addbiboShorttitle( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SHORTTITLE, value);
	}
    /**
     * Adds a value to property Shorttitle from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addbiboShorttitle(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, SHORTTITLE, value);
	}
	
    /**
     * Adds a value to property Shorttitle from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addbiboShorttitle(java.lang.String value) {
		Base.add(this.model, this.getResource(), SHORTTITLE, value);
	}
  

    /**
     * Sets a value of property Shorttitle from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setbiboShorttitle( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SHORTTITLE, value);
	}
	
    /**
     * Sets a value of property Shorttitle from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setbiboShorttitle( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SHORTTITLE, value);
	}
    /**
     * Sets a value of property Shorttitle from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setbiboShorttitle(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, SHORTTITLE, value);
	}
	
    /**
     * Sets a value of property Shorttitle from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setbiboShorttitle(java.lang.String value) {
		Base.set(this.model, this.getResource(), SHORTTITLE, value);
	}
  


    /**
     * Removes a value of property Shorttitle as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removebiboShorttitle( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SHORTTITLE, value);
	}
	
    /**
     * Removes a value of property Shorttitle as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removebiboShorttitle( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SHORTTITLE, value);
	}
    /**
     * Removes a value of property Shorttitle given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removebiboShorttitle(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, SHORTTITLE, value);
	}
	
    /**
     * Removes a value of property Shorttitle given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removebiboShorttitle(java.lang.String value) {
		Base.remove(this.model, this.getResource(), SHORTTITLE, value);
	}
  
    /**
     * Removes all values of property Shorttitle     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllbiboShorttitle( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SHORTTITLE);
	}
	
    /**
     * Removes all values of property Shorttitle	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllbiboShorttitle() {
		Base.removeAll(this.model, this.getResource(), SHORTTITLE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@f673d5 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasbiboTranscriptof(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, TRANSCRIPTOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@f673d5 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasbiboTranscriptof() {
		return Base.has(this.model, this.getResource(), TRANSCRIPTOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@f673d5 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasbiboTranscriptof(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, TRANSCRIPTOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@f673d5 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasbiboTranscriptof( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), TRANSCRIPTOF);
	}

     /**
     * Get all values of property Transcriptof as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboTranscriptof_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, TRANSCRIPTOF);
	}
	
    /**
     * Get all values of property Transcriptof as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboTranscriptof_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TRANSCRIPTOF, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Transcriptof as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboTranscriptof_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), TRANSCRIPTOF);
	}

    /**
     * Get all values of property Transcriptof as a ReactorResult of RDF2Go nodes 
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboTranscriptof_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), TRANSCRIPTOF, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Transcriptof     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllbiboTranscriptof(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, TRANSCRIPTOF, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}
	
    /**
     * Get all values of property Transcriptof as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllbiboTranscriptof_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TRANSCRIPTOF, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property Transcriptof     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllbiboTranscriptof() {
		return Base.getAll(this.model, this.getResource(), TRANSCRIPTOF, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property Transcriptof as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllbiboTranscriptof_as() {
		return Base.getAll_as(this.model, this.getResource(), TRANSCRIPTOF, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}
 
    /**
     * Adds a value to property Transcriptof as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addbiboTranscriptof( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, TRANSCRIPTOF, value);
	}
	
    /**
     * Adds a value to property Transcriptof as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addbiboTranscriptof( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), TRANSCRIPTOF, value);
	}
    /**
     * Adds a value to property Transcriptof from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addbiboTranscriptof(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(model, instanceResource, TRANSCRIPTOF, value);
	}
	
    /**
     * Adds a value to property Transcriptof from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addbiboTranscriptof(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(this.model, this.getResource(), TRANSCRIPTOF, value);
	}
  

    /**
     * Sets a value of property Transcriptof from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setbiboTranscriptof( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, TRANSCRIPTOF, value);
	}
	
    /**
     * Sets a value of property Transcriptof from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setbiboTranscriptof( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), TRANSCRIPTOF, value);
	}
    /**
     * Sets a value of property Transcriptof from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setbiboTranscriptof(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(model, instanceResource, TRANSCRIPTOF, value);
	}
	
    /**
     * Sets a value of property Transcriptof from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setbiboTranscriptof(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(this.model, this.getResource(), TRANSCRIPTOF, value);
	}
  


    /**
     * Removes a value of property Transcriptof as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removebiboTranscriptof( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, TRANSCRIPTOF, value);
	}
	
    /**
     * Removes a value of property Transcriptof as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removebiboTranscriptof( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), TRANSCRIPTOF, value);
	}
    /**
     * Removes a value of property Transcriptof given as an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removebiboTranscriptof(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(model, instanceResource, TRANSCRIPTOF, value);
	}
	
    /**
     * Removes a value of property Transcriptof given as an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removebiboTranscriptof(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(this.model, this.getResource(), TRANSCRIPTOF, value);
	}
  
    /**
     * Removes all values of property Transcriptof     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllbiboTranscriptof( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, TRANSCRIPTOF);
	}
	
    /**
     * Removes all values of property Transcriptof	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllbiboTranscriptof() {
		Base.removeAll(this.model, this.getResource(), TRANSCRIPTOF);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1254fec has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasbiboTranslationof(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, TRANSLATIONOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1254fec has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasbiboTranslationof() {
		return Base.has(this.model, this.getResource(), TRANSLATIONOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1254fec has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasbiboTranslationof(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, TRANSLATIONOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1254fec has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasbiboTranslationof( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), TRANSLATIONOF);
	}

     /**
     * Get all values of property Translationof as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboTranslationof_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, TRANSLATIONOF);
	}
	
    /**
     * Get all values of property Translationof as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboTranslationof_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TRANSLATIONOF, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Translationof as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboTranslationof_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), TRANSLATIONOF);
	}

    /**
     * Get all values of property Translationof as a ReactorResult of RDF2Go nodes 
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboTranslationof_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), TRANSLATIONOF, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Translationof     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Document> getAllbiboTranslationof(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, TRANSLATIONOF, Document.class);
	}
	
    /**
     * Get all values of property Translationof as a ReactorResult of Document 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Document> getAllbiboTranslationof_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TRANSLATIONOF, Document.class);
	}

    /**
     * Get all values of property Translationof     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Document> getAllbiboTranslationof() {
		return Base.getAll(this.model, this.getResource(), TRANSLATIONOF, Document.class);
	}

    /**
     * Get all values of property Translationof as a ReactorResult of Document 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Document> getAllbiboTranslationof_as() {
		return Base.getAll_as(this.model, this.getResource(), TRANSLATIONOF, Document.class);
	}
 
    /**
     * Adds a value to property Translationof as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addbiboTranslationof( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, TRANSLATIONOF, value);
	}
	
    /**
     * Adds a value to property Translationof as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addbiboTranslationof( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), TRANSLATIONOF, value);
	}
    /**
     * Adds a value to property Translationof from an instance of Document 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addbiboTranslationof(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Document value) {
		Base.add(model, instanceResource, TRANSLATIONOF, value);
	}
	
    /**
     * Adds a value to property Translationof from an instance of Document 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addbiboTranslationof(Document value) {
		Base.add(this.model, this.getResource(), TRANSLATIONOF, value);
	}
  

    /**
     * Sets a value of property Translationof from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setbiboTranslationof( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, TRANSLATIONOF, value);
	}
	
    /**
     * Sets a value of property Translationof from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setbiboTranslationof( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), TRANSLATIONOF, value);
	}
    /**
     * Sets a value of property Translationof from an instance of Document 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setbiboTranslationof(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Document value) {
		Base.set(model, instanceResource, TRANSLATIONOF, value);
	}
	
    /**
     * Sets a value of property Translationof from an instance of Document 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setbiboTranslationof(Document value) {
		Base.set(this.model, this.getResource(), TRANSLATIONOF, value);
	}
  


    /**
     * Removes a value of property Translationof as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removebiboTranslationof( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, TRANSLATIONOF, value);
	}
	
    /**
     * Removes a value of property Translationof as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removebiboTranslationof( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), TRANSLATIONOF, value);
	}
    /**
     * Removes a value of property Translationof given as an instance of Document 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removebiboTranslationof(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Document value) {
		Base.remove(model, instanceResource, TRANSLATIONOF, value);
	}
	
    /**
     * Removes a value of property Translationof given as an instance of Document 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removebiboTranslationof(Document value) {
		Base.remove(this.model, this.getResource(), TRANSLATIONOF, value);
	}
  
    /**
     * Removes all values of property Translationof     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllbiboTranslationof( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, TRANSLATIONOF);
	}
	
    /**
     * Removes all values of property Translationof	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllbiboTranslationof() {
		Base.removeAll(this.model, this.getResource(), TRANSLATIONOF);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@b6b83b has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasbiboVolume(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, VOLUME);
	}
	/**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@b6b83b has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasbiboIssue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ISSUE);
	}
    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@b6b83b has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasbiboVolume() {
		return Base.has(this.model, this.getResource(), VOLUME);
	}
	/**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@b6b83b has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasbiboIssue() {
		return Base.has(this.model, this.getResource(), ISSUE);
	}
    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@b6b83b has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasbiboVolume(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, VOLUME);
	}
	/**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@b6b83b has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasbiboIssue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ISSUE);
	}
    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@b6b83b has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasbiboVolume( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), VOLUME);
	}
	/**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@b6b83b has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasbiboIssue( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ISSUE);
	}

     /**
     * Get all values of property Volume as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboVolume_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, VOLUME);
	}
	 /**
     * Get all values of property Volume as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboIssue_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ISSUE);
	}
	
    /**
     * Get all values of property Volume as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboVolume_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, VOLUME, org.ontoware.rdf2go.model.node.Node.class);
	}
	/**
     * Get all values of property Volume as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboIssue_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ISSUE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Volume as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboVolume_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), VOLUME);
	}
	/**
     * Get all values of property Volume as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllbiboIssue_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ISSUE);
	}

    /**
     * Get all values of property Volume as a ReactorResult of RDF2Go nodes 
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboVolume_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), VOLUME, org.ontoware.rdf2go.model.node.Node.class);
	}
	/**
     * Get all values of property Volume as a ReactorResult of RDF2Go nodes 
     * @return a ListE of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllbiboIssue_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ISSUE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Volume     
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllbiboVolume(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, VOLUME, java.lang.String.class);
	}
	/**
     * Get all values of property Volume     
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllbiboIssue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ISSUE, java.lang.String.class);
	}
	
    /**
     * Get all values of property Volume as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllbiboVolume_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, VOLUME, java.lang.String.class);
	}
	/**
     * Get all values of property Volume as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllbiboIssue_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ISSUE, java.lang.String.class);
	}

    /**
     * Get all values of property Volume     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllbiboVolume() {
		return Base.getAll(this.model, this.getResource(), VOLUME, java.lang.String.class);
	}
	/**
     * Get all values of property Volume     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllbiboIssue() {
		return Base.getAll(this.model, this.getResource(), ISSUE, java.lang.String.class);
	}

    /**
     * Get all values of property Volume as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllbiboVolume_as() {
		return Base.getAll_as(this.model, this.getResource(), VOLUME, java.lang.String.class);
	}
	/**
     * Get all values of property Volume as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllbiboIssue_as() {
		return Base.getAll_as(this.model, this.getResource(), ISSUE, java.lang.String.class);
	}
 
    /**
     * Adds a value to property Volume as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addbiboVolume( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, VOLUME, value);
	}
	/**
     * Adds a value to property Volume as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addbiboIssue( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ISSUE, value);
	}
	
    /**
     * Adds a value to property Volume as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addbiboVolume( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), VOLUME, value);
	}
	/**
     * Adds a value to property Volume as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addbiboIssue( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ISSUE, value);
	}
    /**
     * Adds a value to property Volume from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addbiboVolume(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, VOLUME, value);
	}
	/**
     * Adds a value to property Volume from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addbiboIssue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, ISSUE, value);
	}
    /**
     * Adds a value to property Volume from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addbiboVolume(java.lang.String value) {
		Base.add(this.model, this.getResource(), VOLUME, value);
	}
	/**
     * Adds a value to property Volume from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addbiboIssue(java.lang.String value) {
		Base.add(this.model, this.getResource(), ISSUE, value);
	}

    /**
     * Sets a value of property Volume from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setbiboVolume( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, VOLUME, value);
	}
	
    /**
     * Sets a value of property Volume from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setbiboVolume( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), VOLUME, value);
	}
    /**
     * Sets a value of property Volume from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setbiboVolume(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, VOLUME, value);
	}
	
    /**
     * Sets a value of property Volume from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setbiboVolume(java.lang.String value) {
		Base.set(this.model, this.getResource(), VOLUME, value);
	}
  


    /**
     * Removes a value of property Volume as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removebiboVolume( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, VOLUME, value);
	}
	
    /**
     * Removes a value of property Volume as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removebiboVolume( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), VOLUME, value);
	}
    /**
     * Removes a value of property Volume given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removebiboVolume(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, VOLUME, value);
	}
	
    /**
     * Removes a value of property Volume given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removebiboVolume(java.lang.String value) {
		Base.remove(this.model, this.getResource(), VOLUME, value);
	}
  
    /**
     * Removes all values of property Volume     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllbiboVolume( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, VOLUME);
	}
	
    /**
     * Removes all values of property Volume	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllbiboVolume() {
		Base.removeAll(this.model, this.getResource(), VOLUME);
	}
	
	/**
     * Sets a value of property Volume from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setbiboIssue( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ISSUE, value);
	}
	
    /**
     * Sets a value of property Volume from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setbiboIssue( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ISSUE, value);
	}
    /**
     * Sets a value of property Volume from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setbiboIssue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, ISSUE, value);
	}
	
    /**
     * Sets a value of property Volume from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setbiboIssue(java.lang.String value) {
		Base.set(this.model, this.getResource(), ISSUE, value);
	}
  


    /**
     * Removes a value of property Volume as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removebiboIssue( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ISSUE, value);
	}
	
    /**
     * Removes a value of property Volume as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removebiboIssue( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ISSUE, value);
	}
    /**
     * Removes a value of property Volume given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removebiboIssue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, ISSUE, value);
	}
	
    /**
     * Removes a value of property Volume given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removebiboIssue(java.lang.String value) {
		Base.remove(this.model, this.getResource(), ISSUE, value);
	}
  
    /**
     * Removes all values of property Volume     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllbiboIssue( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ISSUE);
	}
	
    /**
     * Removes all values of property Volume	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllbiboIssue() {
		Base.removeAll(this.model, this.getResource(), ISSUE);
	}
	
	/*EXTENSION*/
	public static final String BIBO_NS = "http://purl.org/ontology/bibo/";
	public static final URI BIBO_DOI = new URIImpl(BIBO_NS + "doi", false);
	public static final URI BIBO_PMID = new URIImpl(BIBO_NS + "pmid", false);
	public static final String DCTERMS_NS = "http://purl.org/dc/terms/";
	public static final URI DCTERMS_SUBJECT = new URIImpl(DCTERMS_NS + "subject", false);
	public static final URI DCTERMS_PUBLISHER = new URIImpl(DCTERMS_NS + "publisher", false);
	public static final URI DCTERMS_IDENTIFIER = new URIImpl(DCTERMS_NS + "identifier", false); 
	public static final URI DCTERMS_TITLE = new URIImpl(DCTERMS_NS + "title", false);
	public static final URI DCTERMS_CREATOR = new URIImpl(DCTERMS_NS + "creator", false);
	public static final URI DCTERMS_CREATED = new URIImpl(DCTERMS_NS + "created", false);
	public static final URI DCTERMS_ISSUED = new URIImpl(DCTERMS_NS + "issued", false);
	public static final URI DCTERMS_HAS_PART = new URIImpl(DCTERMS_NS + "hasPart", false);
	public static final URI DCTERMS_IS_PART_OF = new URIImpl(DCTERMS_NS + "isPartOf", false);
	public static final URI DCTERMS_HAS_FORMAT = new URIImpl(DCTERMS_NS + "hasFormat", false);
	public static final URI DCTERMS_IS_FORMAT_OF = new URIImpl(DCTERMS_NS + "isFormatOf", false);
	public static final URI DCTERMS_LICENSE = new URIImpl(DCTERMS_NS + "license", false);
	public static final String DOCO_NS = "http://purl.org/spar/doco/";	
	public static final String OWL_NS = "http://www.w3.org/2002/07/owl#";
	public static final URI OWL_SAMEAS = new URIImpl(OWL_NS + "sameAs", false); 
	public static final URI DCTERMS_REFERENCES = new URIImpl(DCTERMS_NS + "references", false);
	public static final URI DCTERMS_IS_REFERENCED_BY = new URIImpl(DCTERMS_NS + "isReferencedBy", false);
	public static final URI DCTERMS_SOURCE = new URIImpl(DCTERMS_NS + "source", false);
	public static final URI DCTERMS_DESCRIPTION = new URIImpl(DCTERMS_NS + "description", false);
	public static final String SCIENCECOMMONS_NS = "http://purl.org/science/owl/sciencecommons/";
	public static final URI SCIENCECOMMONS_IDBYPMID = new URIImpl(SCIENCECOMMONS_NS + "identified_by_pmid ", false);
	public static final String RDFS_NS = "http://www.w3.org/2000/01/rdf-schema#";
	public static final URI RDFS_SEEALSO = new URIImpl(RDFS_NS + "seeAlso", false);
	public static final String PROV_NS = "http://www.w3.org/ns/prov#";
	public static final URI PROV_WASDERIVEDFROM = new URIImpl(PROV_NS + "wasDerivedFrom", false);
	public static final URI PROV_WASATTRIBUTEDTO = new URIImpl(PROV_NS + "wasAttributedTo", false);
	public static final URI PROV_GENERATEDATTIME = new URIImpl(PROV_NS + "generatedAtTime", false);
	public static final String VOID_NS = "http://rdfs.org/ns/void#";
	public static final URI VOID_IN_DATASET = new URIImpl(VOID_NS + "inDataset", false);
	
	public void addTitle(Model model, String title) {
		Node titleNode = new PlainLiteralImpl(title);
	    this.addbiboTitle(titleNode);
	}
	
	public void addKeyword(Model model, String keyword){
		PlainLiteral kwAsLiteral = model.createPlainLiteral(keyword);
	    model.addStatement(this.asResource(), DCTERMS_SUBJECT, kwAsLiteral); //name
	}
	
	public void addSection(Model model, ws.biotea.ld2rdf.rdf.model.doco.Section section) {
	    model.addStatement(this.asResource(), DCTERMS_HAS_PART, section.asResource()); //doc hasPart section
	    model.addStatement(section.asResource(), DCTERMS_IS_PART_OF, this.asResource()); //section isPartOf document
	}
	
	public void addIssue(Model model, ws.biotea.ld2rdf.rdf.model.bibo.Issue issue) {
	    model.addStatement(this.asResource(), DCTERMS_HAS_PART, issue.asResource()); //doc hasPart section
	    model.addStatement(issue.asResource(), DCTERMS_IS_PART_OF, this.asResource()); //section isPartOf document
	}
	
	public void addAppendix(Model model, ws.biotea.ld2rdf.rdf.model.doco.Appendix appendix) {
	    model.addStatement(this, DCTERMS_HAS_PART, appendix.asResource()); //doc hasPart appendix
	    model.addStatement(appendix, DCTERMS_IS_PART_OF, this.asResource()); //appendix isPartOf doc
	}
	
	public void addPublisherJournal(Model model, Journal journal) {
		Statement stm = model.createStatement(this.asResource(), DCTERMS_PUBLISHER, journal.asResource());
	    model.addStatement(stm); //journal
	}
	
	public void addDOI(Model model, String doi) {
		PlainLiteral doiAsLiteral = model.createPlainLiteral(doi);	    
	    Statement stm = model.createStatement(this.asResource(), BIBO_DOI, doiAsLiteral);
	    model.addStatement(stm); //doi
	}
	
	public void addPMID(Model model, String pubmedID) {
		PlainLiteral doiAsLiteral = model.createPlainLiteral(pubmedID);	    
	    Statement stm = model.createStatement(this.asResource(), BIBO_PMID, doiAsLiteral);
	    model.addStatement(stm); //pmid
	}
	
	public void addIdentifier(Model model, String keyword){
		PlainLiteral kwAsLiteral = model.createPlainLiteral(keyword);	    
	    Statement stm = model.createStatement(this.asResource(), DCTERMS_IDENTIFIER, kwAsLiteral);
	    model.addStatement(stm); //identifier
	}
	
	public void addDCTitle(Model model, String title){
		PlainLiteral titleAsLiteral = model.createPlainLiteral(title);	    
	    Statement stm = model.createStatement(this.asResource(), DCTERMS_TITLE, titleAsLiteral);
	    model.addStatement(stm); //title
	}
	
	public void addDCDescription(Model model, String desc){
		PlainLiteral descAsLiteral = model.createPlainLiteral(desc);	    
	    Statement stm = model.createStatement(this.asResource(), DCTERMS_DESCRIPTION, descAsLiteral);
	    model.addStatement(stm); //description
	}
	
	public void addSameAs(Model model, String uriString) {
		Node uriNode = model.createURI(uriString);
		Statement stm = model.createStatement(this.asResource(), OWL_SAMEAS, uriNode);
	    model.addStatement(stm); //sameAs
	}
	
	public void addDCLicense(Model model, String uriString) {
		Node uriNode = model.createURI(uriString);
		Statement stm = model.createStatement(this.asResource(), DCTERMS_LICENSE, uriNode);
	    model.addStatement(stm); //license
	}
	
	public void addDCCreator(Model model, String creatorURI){
		Node uriNode = model.createURI(creatorURI);	 
	    Statement stm = model.createStatement(this.asResource(), DCTERMS_CREATOR, uriNode);
	    model.addStatement(stm); //creator
	}
	
	public void addDCCreated(Model model, String date){
		PlainLiteral dateNode = model.createPlainLiteral(date);	
		//Node dateNode = new DatatypeLiteralImpl(year, XSD._date); 
	    Statement stm = model.createStatement(this.asResource(), DCTERMS_CREATED, dateNode);
	    model.addStatement(stm); //name
	}
	
	public void addDCIssued(Model model, String year){
		PlainLiteral dateNode = model.createPlainLiteral(year);	
		//Node dateNode = new DatatypeLiteralImpl(year, XSD._date); 
	    Statement stm = model.createStatement(this.asResource(), DCTERMS_ISSUED, dateNode);
	    model.addStatement(stm); //name
	}
	
	public void addDCReferences(Model model, String reference){   
		URI uri = model.createURI(reference);
	    Statement stm = model.createStatement(this.asResource(), DCTERMS_REFERENCES, uri);
	    model.addStatement(stm); //name
	}

	public ClosableIterator<Thing> getAllDCReferences() {
		return Base.getAll(this.model, this.getResource(), DCTERMS_REFERENCES, Thing.class);
	}
	
	public void addDCIsReferencedBy(Model model, String reference){   
		URI uri = model.createURI(reference);
	    Statement stm = model.createStatement(this.asResource(), DCTERMS_IS_REFERENCED_BY, uri);
	    model.addStatement(stm); //name
	}
	
	public ClosableIterator<Thing> getAllDCIsReferencedBy() {
		return Base.getAll(this.model, this.getResource(), DCTERMS_IS_REFERENCED_BY, Thing.class);
	}
	
	public void addSource(Model model, String uriString) {
		Node uriNode = model.createURI(uriString);
		Statement stm = model.createStatement(this.asResource(), DCTERMS_SOURCE, uriNode);
	    model.addStatement(stm); //pmc
	}
	
	public void addIsFormatedVersionOf(Model model, String uriString) {
		Node uriNode = model.createURI(uriString);
		Statement stm = model.createStatement(this.asResource(), DCTERMS_IS_FORMAT_OF, uriNode);
	    model.addStatement(stm); //doc is format of pmc
	    try {
		    Statement inv = model.createStatement(uriNode.asResource(), DCTERMS_HAS_FORMAT, this.asResource());
		    model.addStatement(inv); //pmc hasFormat doc
	    } catch (ClassCastException e) {System.out.println("CAST: " + e.getMessage()); } 
	}
	
	public void addProvWasDerivedFrom(Model model, String uriString) {
		Node uriNode = model.createURI(uriString);
		Statement stm = model.createStatement(this.asResource(), PROV_WASDERIVEDFROM, uriNode);
	    model.addStatement(stm); //pmc
	}
	
	public void addProvWasAttributedTo(Model model, String uriString) {
		Node uriNode = model.createURI(uriString);
		Statement stm = model.createStatement(this.asResource(), PROV_WASATTRIBUTEDTO, uriNode);
	    model.addStatement(stm); //pmc
	}
	
	public void addProvGeneratedAt(Model model, String date) {
		PlainLiteral dateNode = model.createPlainLiteral(date);	
		//Node dateNode = new DatatypeLiteralImpl(year, XSD._date); 
	    Statement stm = model.createStatement(this.asResource(), PROV_GENERATEDATTIME, dateNode);
	    model.addStatement(stm); //name
	}
	
	public void addInDataset(Model model, String uriString) {
		Node uriNode = model.createURI(uriString);
		Statement stm = model.createStatement(this.asResource(), VOID_IN_DATASET, uriNode);
	    model.addStatement(stm); //dataset
	}
	
	public void addScienceCommonPmid (Model model, String uriString) {
		Node uriNode = model.createURI(uriString);
		Statement stm = model.createStatement(this.asResource(), SCIENCECOMMONS_IDBYPMID, uriNode);
	    model.addStatement(stm); //pmc
	}
	
 }